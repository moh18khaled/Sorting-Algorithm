
final2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  000008aa  0000093e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800084  00800084  00000962  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000962  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000994  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  000009d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000131c  00000000  00000000  00000ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b0d  00000000  00000000  00001dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c56  00000000  00000000  00002909  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000248  00000000  00000000  00003560  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000448  00000000  00000000  000037a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ba8  00000000  00000000  00003bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00004798  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ea       	ldi	r30, 0xAA	; 170
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 38       	cpi	r26, 0x84	; 132
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e8       	ldi	r26, 0x84	; 132
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 38       	cpi	r26, 0x87	; 135
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8e 02 	call	0x51c	; 0x51c <main>
  8a:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <keypad_init>:
{'1','2','3','-'},
{'e','0','=','+'}	
};

void keypad_init(){
	SET_BIT(DDRC,p2);
  92:	84 b3       	in	r24, 0x14	; 20
  94:	84 60       	ori	r24, 0x04	; 4
  96:	84 bb       	out	0x14, r24	; 20
	SET_BIT(DDRC,p3);
  98:	84 b3       	in	r24, 0x14	; 20
  9a:	88 60       	ori	r24, 0x08	; 8
  9c:	84 bb       	out	0x14, r24	; 20
	SET_BIT(DDRC,p4);
  9e:	84 b3       	in	r24, 0x14	; 20
  a0:	80 61       	ori	r24, 0x10	; 16
  a2:	84 bb       	out	0x14, r24	; 20
	SET_BIT(DDRC,p5);
  a4:	84 b3       	in	r24, 0x14	; 20
  a6:	80 62       	ori	r24, 0x20	; 32
  a8:	84 bb       	out	0x14, r24	; 20
	
	CLR_BIT(DDRD,p7);
  aa:	81 b3       	in	r24, 0x11	; 17
  ac:	8f 77       	andi	r24, 0x7F	; 127
  ae:	81 bb       	out	0x11, r24	; 17
	CLR_BIT(DDRD,p6);
  b0:	81 b3       	in	r24, 0x11	; 17
  b2:	8f 7b       	andi	r24, 0xBF	; 191
  b4:	81 bb       	out	0x11, r24	; 17
	CLR_BIT(DDRD,p5);
  b6:	81 b3       	in	r24, 0x11	; 17
  b8:	8f 7d       	andi	r24, 0xDF	; 223
  ba:	81 bb       	out	0x11, r24	; 17
	CLR_BIT(DDRD,p3);
  bc:	81 b3       	in	r24, 0x11	; 17
  be:	87 7f       	andi	r24, 0xF7	; 247
  c0:	81 bb       	out	0x11, r24	; 17
	
	SET_BIT(PORTD,p7);
  c2:	82 b3       	in	r24, 0x12	; 18
  c4:	80 68       	ori	r24, 0x80	; 128
  c6:	82 bb       	out	0x12, r24	; 18
	SET_BIT(PORTD,p6);
  c8:	82 b3       	in	r24, 0x12	; 18
  ca:	80 64       	ori	r24, 0x40	; 64
  cc:	82 bb       	out	0x12, r24	; 18
	SET_BIT(PORTD,p5);
  ce:	82 b3       	in	r24, 0x12	; 18
  d0:	80 62       	ori	r24, 0x20	; 32
  d2:	82 bb       	out	0x12, r24	; 18
	SET_BIT(PORTD,p3);
  d4:	82 b3       	in	r24, 0x12	; 18
  d6:	88 60       	ori	r24, 0x08	; 8
  d8:	82 bb       	out	0x12, r24	; 18
  da:	08 95       	ret

000000dc <keypad_get_value>:


unsigned char keypad_get_value(){
	
	unsigned char ans=inva;
	for(int row=5;row>=2;row--){
  dc:	65 e0       	ldi	r22, 0x05	; 5
  de:	70 e0       	ldi	r23, 0x00	; 0
}


unsigned char keypad_get_value(){
	
	unsigned char ans=inva;
  e0:	8f ef       	ldi	r24, 0xFF	; 255
	for(int row=5;row>=2;row--){
  e2:	50 c0       	rjmp	.+160    	; 0x184 <keypad_get_value+0xa8>
		PORTC|=0b00111100;
  e4:	95 b3       	in	r25, 0x15	; 21
  e6:	9c 63       	ori	r25, 0x3C	; 60
  e8:	95 bb       	out	0x15, r25	; 21
		CLR_BIT(PORTC,row);
  ea:	95 b3       	in	r25, 0x15	; 21
  ec:	21 e0       	ldi	r18, 0x01	; 1
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	06 2e       	mov	r0, r22
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <keypad_get_value+0x1c>
  f4:	22 0f       	add	r18, r18
  f6:	33 1f       	adc	r19, r19
  f8:	0a 94       	dec	r0
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <keypad_get_value+0x18>
  fc:	20 95       	com	r18
  fe:	29 23       	and	r18, r25
 100:	25 bb       	out	0x15, r18	; 21
		for(int col=7;col>=3;col--){
 102:	27 e0       	ldi	r18, 0x07	; 7
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	39 c0       	rjmp	.+114    	; 0x17a <keypad_get_value+0x9e>
		if(col==4)col--;
 108:	24 30       	cpi	r18, 0x04	; 4
 10a:	31 05       	cpc	r19, r1
 10c:	11 f4       	brne	.+4      	; 0x112 <keypad_get_value+0x36>
 10e:	21 50       	subi	r18, 0x01	; 1
 110:	31 09       	sbc	r19, r1
		if(GET_BIT(PIND,col)==0){
 112:	40 b3       	in	r20, 0x10	; 16
 114:	50 e0       	ldi	r21, 0x00	; 0
 116:	02 2e       	mov	r0, r18
 118:	02 c0       	rjmp	.+4      	; 0x11e <keypad_get_value+0x42>
 11a:	55 95       	asr	r21
 11c:	47 95       	ror	r20
 11e:	0a 94       	dec	r0
 120:	e2 f7       	brpl	.-8      	; 0x11a <keypad_get_value+0x3e>
 122:	40 fd       	sbrc	r20, 0
 124:	28 c0       	rjmp	.+80     	; 0x176 <keypad_get_value+0x9a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	4f ef       	ldi	r20, 0xFF	; 255
 128:	5b ed       	ldi	r21, 0xDB	; 219
 12a:	95 e0       	ldi	r25, 0x05	; 5
 12c:	41 50       	subi	r20, 0x01	; 1
 12e:	50 40       	sbci	r21, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <keypad_get_value+0x50>
 134:	00 c0       	rjmp	.+0      	; 0x136 <keypad_get_value+0x5a>
 136:	00 00       	nop
			_delay_ms(120);
			if(GET_BIT(PIND,col)==0){
 138:	40 b3       	in	r20, 0x10	; 16
 13a:	50 e0       	ldi	r21, 0x00	; 0
 13c:	02 2e       	mov	r0, r18
 13e:	02 c0       	rjmp	.+4      	; 0x144 <keypad_get_value+0x68>
 140:	55 95       	asr	r21
 142:	47 95       	ror	r20
 144:	0a 94       	dec	r0
 146:	e2 f7       	brpl	.-8      	; 0x140 <keypad_get_value+0x64>
 148:	40 fd       	sbrc	r20, 0
 14a:	15 c0       	rjmp	.+42     	; 0x176 <keypad_get_value+0x9a>
				if(col!=3)
 14c:	23 30       	cpi	r18, 0x03	; 3
 14e:	31 05       	cpc	r19, r1
 150:	91 f0       	breq	.+36     	; 0x176 <keypad_get_value+0x9a>
					ans=arr[5-row][7-col];
 152:	85 e0       	ldi	r24, 0x05	; 5
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	86 1b       	sub	r24, r22
 158:	97 0b       	sbc	r25, r23
 15a:	47 e0       	ldi	r20, 0x07	; 7
 15c:	50 e0       	ldi	r21, 0x00	; 0
 15e:	42 1b       	sub	r20, r18
 160:	53 0b       	sbc	r21, r19
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	80 5a       	subi	r24, 0xA0	; 160
 16c:	9f 4f       	sbci	r25, 0xFF	; 255
 16e:	fc 01       	movw	r30, r24
 170:	e4 0f       	add	r30, r20
 172:	f5 1f       	adc	r31, r21
 174:	80 81       	ld	r24, Z
	
	unsigned char ans=inva;
	for(int row=5;row>=2;row--){
		PORTC|=0b00111100;
		CLR_BIT(PORTC,row);
		for(int col=7;col>=3;col--){
 176:	21 50       	subi	r18, 0x01	; 1
 178:	31 09       	sbc	r19, r1
 17a:	23 30       	cpi	r18, 0x03	; 3
 17c:	31 05       	cpc	r19, r1
 17e:	24 f6       	brge	.-120    	; 0x108 <keypad_get_value+0x2c>


unsigned char keypad_get_value(){
	
	unsigned char ans=inva;
	for(int row=5;row>=2;row--){
 180:	61 50       	subi	r22, 0x01	; 1
 182:	71 09       	sbc	r23, r1
 184:	62 30       	cpi	r22, 0x02	; 2
 186:	71 05       	cpc	r23, r1
 188:	0c f0       	brlt	.+2      	; 0x18c <keypad_get_value+0xb0>
 18a:	ac cf       	rjmp	.-168    	; 0xe4 <keypad_get_value+0x8>
				}
			}
		}
	}
	return ans;
 18c:	08 95       	ret

0000018e <len_num>:

void LCD_string(unsigned char* str){
	for(int i=0;str[i]!='\0';i++){
		LCD_WriteChar(str[i]);
	}
}
 18e:	20 e0       	ldi	r18, 0x00	; 0
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	07 c0       	rjmp	.+14     	; 0x1a2 <len_num+0x14>
 194:	6a e0       	ldi	r22, 0x0A	; 10
 196:	70 e0       	ldi	r23, 0x00	; 0
 198:	0e 94 2b 04 	call	0x856	; 0x856 <__divmodhi4>
 19c:	cb 01       	movw	r24, r22
 19e:	2f 5f       	subi	r18, 0xFF	; 255
 1a0:	3f 4f       	sbci	r19, 0xFF	; 255
 1a2:	18 16       	cp	r1, r24
 1a4:	19 06       	cpc	r1, r25
 1a6:	b4 f3       	brlt	.-20     	; 0x194 <len_num+0x6>
 1a8:	c9 01       	movw	r24, r18
 1aa:	08 95       	ret

000001ac <LCD_command>:
 1ac:	9b b3       	in	r25, 0x1b	; 27
 1ae:	97 7f       	andi	r25, 0xF7	; 247
 1b0:	9b bb       	out	0x1b, r25	; 27
 1b2:	98 b3       	in	r25, 0x18	; 24
 1b4:	98 7e       	andi	r25, 0xE8	; 232
 1b6:	98 bb       	out	0x18, r25	; 24
 1b8:	28 2f       	mov	r18, r24
 1ba:	22 95       	swap	r18
 1bc:	2f 70       	andi	r18, 0x0F	; 15
 1be:	92 2f       	mov	r25, r18
 1c0:	98 70       	andi	r25, 0x08	; 8
 1c2:	49 2f       	mov	r20, r25
 1c4:	50 e0       	ldi	r21, 0x00	; 0
 1c6:	44 0f       	add	r20, r20
 1c8:	55 1f       	adc	r21, r21
 1ca:	27 70       	andi	r18, 0x07	; 7
 1cc:	42 2b       	or	r20, r18
 1ce:	98 b3       	in	r25, 0x18	; 24
 1d0:	49 2b       	or	r20, r25
 1d2:	48 bb       	out	0x18, r20	; 24
 1d4:	9b b3       	in	r25, 0x1b	; 27
 1d6:	9b 7f       	andi	r25, 0xFB	; 251
 1d8:	9b bb       	out	0x1b, r25	; 27
 1da:	9b b3       	in	r25, 0x1b	; 27
 1dc:	94 60       	ori	r25, 0x04	; 4
 1de:	9b bb       	out	0x1b, r25	; 27
 1e0:	ef e9       	ldi	r30, 0x9F	; 159
 1e2:	ff e0       	ldi	r31, 0x0F	; 15
 1e4:	31 97       	sbiw	r30, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <LCD_command+0x38>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <LCD_command+0x3e>
 1ea:	00 00       	nop
 1ec:	9b b3       	in	r25, 0x1b	; 27
 1ee:	9b 7f       	andi	r25, 0xFB	; 251
 1f0:	9b bb       	out	0x1b, r25	; 27
 1f2:	98 b3       	in	r25, 0x18	; 24
 1f4:	98 7e       	andi	r25, 0xE8	; 232
 1f6:	98 bb       	out	0x18, r25	; 24
 1f8:	98 2f       	mov	r25, r24
 1fa:	98 70       	andi	r25, 0x08	; 8
 1fc:	29 2f       	mov	r18, r25
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	22 0f       	add	r18, r18
 202:	33 1f       	adc	r19, r19
 204:	87 70       	andi	r24, 0x07	; 7
 206:	28 2b       	or	r18, r24
 208:	88 b3       	in	r24, 0x18	; 24
 20a:	28 2b       	or	r18, r24
 20c:	28 bb       	out	0x18, r18	; 24
 20e:	8b b3       	in	r24, 0x1b	; 27
 210:	8b 7f       	andi	r24, 0xFB	; 251
 212:	8b bb       	out	0x1b, r24	; 27
 214:	8b b3       	in	r24, 0x1b	; 27
 216:	84 60       	ori	r24, 0x04	; 4
 218:	8b bb       	out	0x1b, r24	; 27
 21a:	8f e9       	ldi	r24, 0x9F	; 159
 21c:	9f e0       	ldi	r25, 0x0F	; 15
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <LCD_command+0x72>
 222:	00 c0       	rjmp	.+0      	; 0x224 <LCD_command+0x78>
 224:	00 00       	nop
 226:	8b b3       	in	r24, 0x1b	; 27
 228:	8b 7f       	andi	r24, 0xFB	; 251
 22a:	8b bb       	out	0x1b, r24	; 27
 22c:	ef e1       	ldi	r30, 0x1F	; 31
 22e:	fe e4       	ldi	r31, 0x4E	; 78
 230:	31 97       	sbiw	r30, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <LCD_command+0x84>
 234:	00 c0       	rjmp	.+0      	; 0x236 <LCD_command+0x8a>
 236:	00 00       	nop
 238:	08 95       	ret

0000023a <LCD_init>:
 23a:	8a b3       	in	r24, 0x1a	; 26
 23c:	88 60       	ori	r24, 0x08	; 8
 23e:	8a bb       	out	0x1a, r24	; 26
 240:	8a b3       	in	r24, 0x1a	; 26
 242:	84 60       	ori	r24, 0x04	; 4
 244:	8a bb       	out	0x1a, r24	; 26
 246:	87 b3       	in	r24, 0x17	; 23
 248:	81 60       	ori	r24, 0x01	; 1
 24a:	87 bb       	out	0x17, r24	; 23
 24c:	87 b3       	in	r24, 0x17	; 23
 24e:	82 60       	ori	r24, 0x02	; 2
 250:	87 bb       	out	0x17, r24	; 23
 252:	87 b3       	in	r24, 0x17	; 23
 254:	84 60       	ori	r24, 0x04	; 4
 256:	87 bb       	out	0x17, r24	; 23
 258:	87 b3       	in	r24, 0x17	; 23
 25a:	80 61       	ori	r24, 0x10	; 16
 25c:	87 bb       	out	0x17, r24	; 23
 25e:	8f e5       	ldi	r24, 0x5F	; 95
 260:	9a ee       	ldi	r25, 0xEA	; 234
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <LCD_init+0x28>
 266:	00 c0       	rjmp	.+0      	; 0x268 <LCD_init+0x2e>
 268:	00 00       	nop
 26a:	86 e0       	ldi	r24, 0x06	; 6
 26c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_command>
 270:	82 e0       	ldi	r24, 0x02	; 2
 272:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_command>
 276:	88 e2       	ldi	r24, 0x28	; 40
 278:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_command>
 27c:	8c e0       	ldi	r24, 0x0C	; 12
 27e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_command>
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_command>
 288:	80 e8       	ldi	r24, 0x80	; 128
 28a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_command>
 28e:	08 95       	ret

00000290 <LCD_WriteChar>:
 290:	9b b3       	in	r25, 0x1b	; 27
 292:	98 60       	ori	r25, 0x08	; 8
 294:	9b bb       	out	0x1b, r25	; 27
 296:	98 b3       	in	r25, 0x18	; 24
 298:	98 7e       	andi	r25, 0xE8	; 232
 29a:	98 bb       	out	0x18, r25	; 24
 29c:	28 2f       	mov	r18, r24
 29e:	22 95       	swap	r18
 2a0:	2f 70       	andi	r18, 0x0F	; 15
 2a2:	92 2f       	mov	r25, r18
 2a4:	98 70       	andi	r25, 0x08	; 8
 2a6:	49 2f       	mov	r20, r25
 2a8:	50 e0       	ldi	r21, 0x00	; 0
 2aa:	44 0f       	add	r20, r20
 2ac:	55 1f       	adc	r21, r21
 2ae:	27 70       	andi	r18, 0x07	; 7
 2b0:	42 2b       	or	r20, r18
 2b2:	98 b3       	in	r25, 0x18	; 24
 2b4:	49 2b       	or	r20, r25
 2b6:	48 bb       	out	0x18, r20	; 24
 2b8:	9b b3       	in	r25, 0x1b	; 27
 2ba:	9b 7f       	andi	r25, 0xFB	; 251
 2bc:	9b bb       	out	0x1b, r25	; 27
 2be:	9b b3       	in	r25, 0x1b	; 27
 2c0:	94 60       	ori	r25, 0x04	; 4
 2c2:	9b bb       	out	0x1b, r25	; 27
 2c4:	ef e9       	ldi	r30, 0x9F	; 159
 2c6:	ff e0       	ldi	r31, 0x0F	; 15
 2c8:	31 97       	sbiw	r30, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <LCD_WriteChar+0x38>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <LCD_WriteChar+0x3e>
 2ce:	00 00       	nop
 2d0:	9b b3       	in	r25, 0x1b	; 27
 2d2:	9b 7f       	andi	r25, 0xFB	; 251
 2d4:	9b bb       	out	0x1b, r25	; 27
 2d6:	98 b3       	in	r25, 0x18	; 24
 2d8:	98 7e       	andi	r25, 0xE8	; 232
 2da:	98 bb       	out	0x18, r25	; 24
 2dc:	98 2f       	mov	r25, r24
 2de:	98 70       	andi	r25, 0x08	; 8
 2e0:	29 2f       	mov	r18, r25
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	22 0f       	add	r18, r18
 2e6:	33 1f       	adc	r19, r19
 2e8:	87 70       	andi	r24, 0x07	; 7
 2ea:	28 2b       	or	r18, r24
 2ec:	88 b3       	in	r24, 0x18	; 24
 2ee:	28 2b       	or	r18, r24
 2f0:	28 bb       	out	0x18, r18	; 24
 2f2:	8b b3       	in	r24, 0x1b	; 27
 2f4:	8b 7f       	andi	r24, 0xFB	; 251
 2f6:	8b bb       	out	0x1b, r24	; 27
 2f8:	8b b3       	in	r24, 0x1b	; 27
 2fa:	84 60       	ori	r24, 0x04	; 4
 2fc:	8b bb       	out	0x1b, r24	; 27
 2fe:	8f e9       	ldi	r24, 0x9F	; 159
 300:	9f e0       	ldi	r25, 0x0F	; 15
 302:	01 97       	sbiw	r24, 0x01	; 1
 304:	f1 f7       	brne	.-4      	; 0x302 <LCD_WriteChar+0x72>
 306:	00 c0       	rjmp	.+0      	; 0x308 <LCD_WriteChar+0x78>
 308:	00 00       	nop
 30a:	8b b3       	in	r24, 0x1b	; 27
 30c:	8b 7f       	andi	r24, 0xFB	; 251
 30e:	8b bb       	out	0x1b, r24	; 27
 310:	08 95       	ret

00000312 <LCD_clear>:
		_delay_ms(1000);
	}
	
}
void LCD_clear(void){
	LCD_command(0x01);
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_command>
 318:	08 95       	ret

0000031a <LCD_Number>:
	for(int i=0;str[i]!='\0';i++){
		LCD_WriteChar(str[i]);
	}
}

void LCD_Number(int *arr ,const int size) {
 31a:	af 92       	push	r10
 31c:	bf 92       	push	r11
 31e:	cf 92       	push	r12
 320:	df 92       	push	r13
 322:	ef 92       	push	r14
 324:	ff 92       	push	r15
 326:	0f 93       	push	r16
 328:	1f 93       	push	r17
 32a:	cf 93       	push	r28
 32c:	df 93       	push	r29
 32e:	6c 01       	movw	r12, r24
 330:	7b 01       	movw	r14, r22
	
	
	for (int i = 0 ; i < size;i++)
 332:	00 e0       	ldi	r16, 0x00	; 0
 334:	10 e0       	ldi	r17, 0x00	; 0
 336:	e3 c0       	rjmp	.+454    	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
	{
		int l=len_num(arr[i]);
 338:	e8 01       	movw	r28, r16
 33a:	cc 0f       	add	r28, r28
 33c:	dd 1f       	adc	r29, r29
 33e:	cc 0d       	add	r28, r12
 340:	dd 1d       	adc	r29, r13
 342:	88 81       	ld	r24, Y
 344:	99 81       	ldd	r25, Y+1	; 0x01
 346:	0e 94 c7 00 	call	0x18e	; 0x18e <len_num>
 34a:	5c 01       	movw	r10, r24
		
		if(cursor_position <= 18 && l > 18-cursor_position){
 34c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__data_end>
 350:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__data_end+0x1>
 354:	83 31       	cpi	r24, 0x13	; 19
 356:	91 05       	cpc	r25, r1
 358:	5c f4       	brge	.+22     	; 0x370 <LCD_Number+0x56>
 35a:	22 e1       	ldi	r18, 0x12	; 18
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	a9 01       	movw	r20, r18
 360:	48 1b       	sub	r20, r24
 362:	59 0b       	sbc	r21, r25
 364:	4a 15       	cp	r20, r10
 366:	5b 05       	cpc	r21, r11
 368:	1c f4       	brge	.+6      	; 0x370 <LCD_Number+0x56>
			LCD_WriteChar(' ');
 36a:	80 e2       	ldi	r24, 0x20	; 32
 36c:	0e 94 48 01 	call	0x290	; 0x290 <LCD_WriteChar>
		}
		if(l > 30-cursor_position ){
 370:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__data_end>
 374:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__data_end+0x1>
 378:	8e e1       	ldi	r24, 0x1E	; 30
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	82 1b       	sub	r24, r18
 37e:	93 0b       	sbc	r25, r19
 380:	8a 15       	cp	r24, r10
 382:	9b 05       	cpc	r25, r11
 384:	7c f4       	brge	.+30     	; 0x3a4 <LCD_Number+0x8a>
			LCD_clear();
 386:	0e 94 89 01 	call	0x312	; 0x312 <LCD_clear>
 38a:	8f e3       	ldi	r24, 0x3F	; 63
 38c:	9f e1       	ldi	r25, 0x1F	; 31
 38e:	01 97       	sbiw	r24, 0x01	; 1
 390:	f1 f7       	brne	.-4      	; 0x38e <LCD_Number+0x74>
 392:	00 c0       	rjmp	.+0      	; 0x394 <LCD_Number+0x7a>
 394:	00 00       	nop
			_delay_ms(2);
			cursor_position = 0;
 396:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__data_end+0x1>
 39a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__data_end>
			LCD_command(0x80);
 39e:	80 e8       	ldi	r24, 0x80	; 128
 3a0:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_command>
		}
		
		LCD_WriteChar(' ');
 3a4:	80 e2       	ldi	r24, 0x20	; 32
 3a6:	0e 94 48 01 	call	0x290	; 0x290 <LCD_WriteChar>
		cursor_position++;
 3aa:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__data_end>
 3ae:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__data_end+0x1>
 3b2:	01 96       	adiw	r24, 0x01	; 1
 3b4:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__data_end+0x1>
 3b8:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__data_end>
		
		// Display each digit of the number, ensuring all four digits are shown
		if (arr[i] < 1000) {
 3bc:	88 81       	ld	r24, Y
 3be:	99 81       	ldd	r25, Y+1	; 0x01
 3c0:	88 3e       	cpi	r24, 0xE8	; 232
 3c2:	93 40       	sbci	r25, 0x03	; 3
 3c4:	64 f4       	brge	.+24     	; 0x3de <LCD_Number+0xc4>
			LCD_WriteChar(' '); // Display a space as a placeholder for thousands digit
 3c6:	80 e2       	ldi	r24, 0x20	; 32
 3c8:	0e 94 48 01 	call	0x290	; 0x290 <LCD_WriteChar>
			cursor_position++;
 3cc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__data_end>
 3d0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__data_end+0x1>
 3d4:	01 96       	adiw	r24, 0x01	; 1
 3d6:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__data_end+0x1>
 3da:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__data_end>
		}
		if (arr[i] < 100) {
 3de:	88 81       	ld	r24, Y
 3e0:	99 81       	ldd	r25, Y+1	; 0x01
 3e2:	84 36       	cpi	r24, 0x64	; 100
 3e4:	91 05       	cpc	r25, r1
 3e6:	64 f4       	brge	.+24     	; 0x400 <__EEPROM_REGION_LENGTH__>
			LCD_WriteChar(' '); // Display a space as a placeholder for hundreds digit
 3e8:	80 e2       	ldi	r24, 0x20	; 32
 3ea:	0e 94 48 01 	call	0x290	; 0x290 <LCD_WriteChar>
			cursor_position++;
 3ee:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__data_end>
 3f2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__data_end+0x1>
 3f6:	01 96       	adiw	r24, 0x01	; 1
 3f8:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__data_end+0x1>
 3fc:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__data_end>
		}
		if (arr[i] < 10) {
 400:	88 81       	ld	r24, Y
 402:	99 81       	ldd	r25, Y+1	; 0x01
 404:	0a 97       	sbiw	r24, 0x0a	; 10
 406:	64 f4       	brge	.+24     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
			LCD_WriteChar(' '); // Display a space as a placeholder for tens digit
 408:	80 e2       	ldi	r24, 0x20	; 32
 40a:	0e 94 48 01 	call	0x290	; 0x290 <LCD_WriteChar>
			cursor_position++;
 40e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__data_end>
 412:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__data_end+0x1>
 416:	01 96       	adiw	r24, 0x01	; 1
 418:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__data_end+0x1>
 41c:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__data_end>
		}
		if (arr[i] >= 1000) {
 420:	88 81       	ld	r24, Y
 422:	99 81       	ldd	r25, Y+1	; 0x01
 424:	88 3e       	cpi	r24, 0xE8	; 232
 426:	43 e0       	ldi	r20, 0x03	; 3
 428:	94 07       	cpc	r25, r20
 42a:	ac f0       	brlt	.+42     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
			LCD_WriteChar(arr[i] / 1000 % 10 + '0'); // Display thousands digit
 42c:	68 ee       	ldi	r22, 0xE8	; 232
 42e:	73 e0       	ldi	r23, 0x03	; 3
 430:	0e 94 2b 04 	call	0x856	; 0x856 <__divmodhi4>
 434:	cb 01       	movw	r24, r22
 436:	6a e0       	ldi	r22, 0x0A	; 10
 438:	70 e0       	ldi	r23, 0x00	; 0
 43a:	0e 94 2b 04 	call	0x856	; 0x856 <__divmodhi4>
 43e:	80 5d       	subi	r24, 0xD0	; 208
 440:	0e 94 48 01 	call	0x290	; 0x290 <LCD_WriteChar>
			cursor_position++;
 444:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__data_end>
 448:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__data_end+0x1>
 44c:	01 96       	adiw	r24, 0x01	; 1
 44e:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__data_end+0x1>
 452:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__data_end>
		}
		if (arr[i] >= 100) {
 456:	88 81       	ld	r24, Y
 458:	99 81       	ldd	r25, Y+1	; 0x01
 45a:	84 36       	cpi	r24, 0x64	; 100
 45c:	91 05       	cpc	r25, r1
 45e:	ac f0       	brlt	.+42     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
			LCD_WriteChar(arr[i] / 100 % 10 + '0'); // Display hundreds digit
 460:	64 e6       	ldi	r22, 0x64	; 100
 462:	70 e0       	ldi	r23, 0x00	; 0
 464:	0e 94 2b 04 	call	0x856	; 0x856 <__divmodhi4>
 468:	cb 01       	movw	r24, r22
 46a:	6a e0       	ldi	r22, 0x0A	; 10
 46c:	70 e0       	ldi	r23, 0x00	; 0
 46e:	0e 94 2b 04 	call	0x856	; 0x856 <__divmodhi4>
 472:	80 5d       	subi	r24, 0xD0	; 208
 474:	0e 94 48 01 	call	0x290	; 0x290 <LCD_WriteChar>
			cursor_position++;
 478:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__data_end>
 47c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__data_end+0x1>
 480:	01 96       	adiw	r24, 0x01	; 1
 482:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__data_end+0x1>
 486:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__data_end>
		}
		if (arr[i] >= 10) {
 48a:	88 81       	ld	r24, Y
 48c:	99 81       	ldd	r25, Y+1	; 0x01
 48e:	8a 30       	cpi	r24, 0x0A	; 10
 490:	91 05       	cpc	r25, r1
 492:	ac f0       	brlt	.+42     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
			LCD_WriteChar(arr[i] / 10 % 10 + '0'); // Display tens digit
 494:	2a e0       	ldi	r18, 0x0A	; 10
 496:	30 e0       	ldi	r19, 0x00	; 0
 498:	b9 01       	movw	r22, r18
 49a:	0e 94 2b 04 	call	0x856	; 0x856 <__divmodhi4>
 49e:	cb 01       	movw	r24, r22
 4a0:	b9 01       	movw	r22, r18
 4a2:	0e 94 2b 04 	call	0x856	; 0x856 <__divmodhi4>
 4a6:	80 5d       	subi	r24, 0xD0	; 208
 4a8:	0e 94 48 01 	call	0x290	; 0x290 <LCD_WriteChar>
			cursor_position++;
 4ac:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__data_end>
 4b0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__data_end+0x1>
 4b4:	01 96       	adiw	r24, 0x01	; 1
 4b6:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__data_end+0x1>
 4ba:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__data_end>
		}
		LCD_WriteChar(arr[i] % 10 + '0'); // Display units digit
 4be:	88 81       	ld	r24, Y
 4c0:	99 81       	ldd	r25, Y+1	; 0x01
 4c2:	6a e0       	ldi	r22, 0x0A	; 10
 4c4:	70 e0       	ldi	r23, 0x00	; 0
 4c6:	0e 94 2b 04 	call	0x856	; 0x856 <__divmodhi4>
 4ca:	80 5d       	subi	r24, 0xD0	; 208
 4cc:	0e 94 48 01 	call	0x290	; 0x290 <LCD_WriteChar>
		cursor_position++;
 4d0:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__data_end>
 4d4:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__data_end+0x1>
 4d8:	01 96       	adiw	r24, 0x01	; 1
 4da:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__data_end+0x1>
 4de:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__data_end>
		
		LCD_WriteChar(' ');
 4e2:	80 e2       	ldi	r24, 0x20	; 32
 4e4:	0e 94 48 01 	call	0x290	; 0x290 <LCD_WriteChar>
 4e8:	5f ef       	ldi	r21, 0xFF	; 255
 4ea:	83 ed       	ldi	r24, 0xD3	; 211
 4ec:	90 e3       	ldi	r25, 0x30	; 48
 4ee:	51 50       	subi	r21, 0x01	; 1
 4f0:	80 40       	sbci	r24, 0x00	; 0
 4f2:	90 40       	sbci	r25, 0x00	; 0
 4f4:	e1 f7       	brne	.-8      	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
 4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
 4f8:	00 00       	nop
}

void LCD_Number(int *arr ,const int size) {
	
	
	for (int i = 0 ; i < size;i++)
 4fa:	0f 5f       	subi	r16, 0xFF	; 255
 4fc:	1f 4f       	sbci	r17, 0xFF	; 255
 4fe:	0e 15       	cp	r16, r14
 500:	1f 05       	cpc	r17, r15
 502:	0c f4       	brge	.+2      	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
 504:	19 cf       	rjmp	.-462    	; 0x338 <LCD_Number+0x1e>
		
		LCD_WriteChar(' ');
		_delay_ms(1000);
	}
	
}
 506:	df 91       	pop	r29
 508:	cf 91       	pop	r28
 50a:	1f 91       	pop	r17
 50c:	0f 91       	pop	r16
 50e:	ff 90       	pop	r15
 510:	ef 90       	pop	r14
 512:	df 90       	pop	r13
 514:	cf 90       	pop	r12
 516:	bf 90       	pop	r11
 518:	af 90       	pop	r10
 51a:	08 95       	ret

0000051c <main>:
#include "KeyPad.h"
#include "pins.h"
#include "numbers.h"

int main(void)
{
 51c:	cf 93       	push	r28
 51e:	df 93       	push	r29
 520:	cd b7       	in	r28, 0x3d	; 61
 522:	de b7       	in	r29, 0x3e	; 62
 524:	aa 97       	sbiw	r28, 0x2a	; 42
 526:	0f b6       	in	r0, 0x3f	; 63
 528:	f8 94       	cli
 52a:	de bf       	out	0x3e, r29	; 62
 52c:	0f be       	out	0x3f, r0	; 63
 52e:	cd bf       	out	0x3d, r28	; 61
const int fixed_size = 20;
int arr[fixed_size],num=-1,size=0;
 530:	8f ef       	ldi	r24, 0xFF	; 255
 532:	9f ef       	ldi	r25, 0xFF	; 255
 534:	9a 83       	std	Y+2, r25	; 0x02
 536:	89 83       	std	Y+1, r24	; 0x01

keypad_init();
 538:	0e 94 49 00 	call	0x92	; 0x92 <keypad_init>
LCD_init();
 53c:	0e 94 1d 01 	call	0x23a	; 0x23a <LCD_init>
#include "numbers.h"

int main(void)
{
const int fixed_size = 20;
int arr[fixed_size],num=-1,size=0;
 540:	e1 2c       	mov	r14, r1
 542:	f1 2c       	mov	r15, r1
keypad_init();
LCD_init();

    while (1){

		unsigned char ans=keypad_get_value();
 544:	0e 94 6e 00 	call	0xdc	; 0xdc <keypad_get_value>
 548:	18 2f       	mov	r17, r24

		if(ans=='='){
 54a:	8d 33       	cpi	r24, 0x3D	; 61
 54c:	d9 f4       	brne	.+54     	; 0x584 <main+0x68>
			if(num!=-1){
 54e:	89 81       	ldd	r24, Y+1	; 0x01
 550:	9a 81       	ldd	r25, Y+2	; 0x02
 552:	01 96       	adiw	r24, 0x01	; 1
 554:	b9 f3       	breq	.-18     	; 0x544 <main+0x28>
				LCD_clear();
 556:	0e 94 89 01 	call	0x312	; 0x312 <LCD_clear>

			//LCD code
			arr[size++]=num,num=-1;
 55a:	f7 01       	movw	r30, r14
 55c:	ee 0f       	add	r30, r30
 55e:	ff 1f       	adc	r31, r31
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	8c 0f       	add	r24, r28
 566:	9d 1f       	adc	r25, r29
 568:	e8 0f       	add	r30, r24
 56a:	f9 1f       	adc	r31, r25
 56c:	89 81       	ldd	r24, Y+1	; 0x01
 56e:	9a 81       	ldd	r25, Y+2	; 0x02
 570:	93 83       	std	Z+3, r25	; 0x03
 572:	82 83       	std	Z+2, r24	; 0x02
 574:	8f ef       	ldi	r24, 0xFF	; 255
 576:	9f ef       	ldi	r25, 0xFF	; 255
 578:	9a 83       	std	Y+2, r25	; 0x02
 57a:	89 83       	std	Y+1, r24	; 0x01
 57c:	c7 01       	movw	r24, r14
 57e:	01 96       	adiw	r24, 0x01	; 1
 580:	7c 01       	movw	r14, r24
 582:	e0 cf       	rjmp	.-64     	; 0x544 <main+0x28>
			}
		}
		else if(ans=='e'){
 584:	85 36       	cpi	r24, 0x65	; 101
 586:	39 f5       	brne	.+78     	; 0x5d6 <main+0xba>
			if(num==-1){
 588:	89 81       	ldd	r24, Y+1	; 0x01
 58a:	9a 81       	ldd	r25, Y+2	; 0x02
 58c:	01 96       	adiw	r24, 0x01	; 1
 58e:	d1 f6       	brne	.-76     	; 0x544 <main+0x28>
			sort(arr,size);
 590:	b7 01       	movw	r22, r14
 592:	ce 01       	movw	r24, r28
 594:	03 96       	adiw	r24, 0x03	; 3
 596:	0e 94 71 03 	call	0x6e2	; 0x6e2 <sort>
			//LCD code
			LCD_Number(arr,size);
 59a:	b7 01       	movw	r22, r14
 59c:	ce 01       	movw	r24, r28
 59e:	03 96       	adiw	r24, 0x03	; 3
 5a0:	0e 94 8d 01 	call	0x31a	; 0x31a <LCD_Number>
 5a4:	8f ef       	ldi	r24, 0xFF	; 255
 5a6:	93 ed       	ldi	r25, 0xD3	; 211
 5a8:	20 e3       	ldi	r18, 0x30	; 48
 5aa:	81 50       	subi	r24, 0x01	; 1
 5ac:	90 40       	sbci	r25, 0x00	; 0
 5ae:	20 40       	sbci	r18, 0x00	; 0
 5b0:	e1 f7       	brne	.-8      	; 0x5aa <main+0x8e>
 5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <main+0x98>
 5b4:	00 00       	nop
			
			_delay_ms(1000);
			seven_seg_init();
 5b6:	0e 94 a5 03 	call	0x74a	; 0x74a <seven_seg_init>
			separate_num(arr,size);
 5ba:	b7 01       	movw	r22, r14
 5bc:	ce 01       	movw	r24, r28
 5be:	03 96       	adiw	r24, 0x03	; 3
 5c0:	0e 94 14 03 	call	0x628	; 0x628 <separate_num>
			num=-1,size=0,LCD_clear();
 5c4:	8f ef       	ldi	r24, 0xFF	; 255
 5c6:	9f ef       	ldi	r25, 0xFF	; 255
 5c8:	9a 83       	std	Y+2, r25	; 0x02
 5ca:	89 83       	std	Y+1, r24	; 0x01
 5cc:	0e 94 89 01 	call	0x312	; 0x312 <LCD_clear>
 5d0:	e1 2c       	mov	r14, r1
 5d2:	f1 2c       	mov	r15, r1
 5d4:	b7 cf       	rjmp	.-146    	; 0x544 <main+0x28>
			}
		}
		else if(ans!=inva){
 5d6:	8f 3f       	cpi	r24, 0xFF	; 255
 5d8:	09 f4       	brne	.+2      	; 0x5dc <main+0xc0>
 5da:	b4 cf       	rjmp	.-152    	; 0x544 <main+0x28>
			//LCD code
			
			LCD_WriteChar(ans);
 5dc:	0e 94 48 01 	call	0x290	; 0x290 <LCD_WriteChar>
			
			build_num(&num,ans);
 5e0:	61 2f       	mov	r22, r17
 5e2:	ce 01       	movw	r24, r28
 5e4:	01 96       	adiw	r24, 0x01	; 1
 5e6:	0e 94 f6 02 	call	0x5ec	; 0x5ec <build_num>
 5ea:	ac cf       	rjmp	.-168    	; 0x544 <main+0x28>

000005ec <build_num>:
#include "timer0.h"

uint8_t g_tick=0;

void build_num(int *num, unsigned char ans) {
	ans -= '0';
 5ec:	60 53       	subi	r22, 0x30	; 48
	if (*num == -1)
 5ee:	fc 01       	movw	r30, r24
 5f0:	20 81       	ld	r18, Z
 5f2:	31 81       	ldd	r19, Z+1	; 0x01
 5f4:	2f 3f       	cpi	r18, 0xFF	; 255
 5f6:	ff ef       	ldi	r31, 0xFF	; 255
 5f8:	3f 07       	cpc	r19, r31
 5fa:	29 f4       	brne	.+10     	; 0x606 <build_num+0x1a>
	*num = ans;
 5fc:	70 e0       	ldi	r23, 0x00	; 0
 5fe:	fc 01       	movw	r30, r24
 600:	71 83       	std	Z+1, r23	; 0x01
 602:	60 83       	st	Z, r22
 604:	08 95       	ret
	else
	*num = *num * 10 + ans;
 606:	a9 01       	movw	r20, r18
 608:	44 0f       	add	r20, r20
 60a:	55 1f       	adc	r21, r21
 60c:	22 0f       	add	r18, r18
 60e:	33 1f       	adc	r19, r19
 610:	22 0f       	add	r18, r18
 612:	33 1f       	adc	r19, r19
 614:	22 0f       	add	r18, r18
 616:	33 1f       	adc	r19, r19
 618:	24 0f       	add	r18, r20
 61a:	35 1f       	adc	r19, r21
 61c:	26 0f       	add	r18, r22
 61e:	31 1d       	adc	r19, r1
 620:	fc 01       	movw	r30, r24
 622:	31 83       	std	Z+1, r19	; 0x01
 624:	20 83       	st	Z, r18
 626:	08 95       	ret

00000628 <separate_num>:
}


void separate_num(int *arr, int size) {
 628:	6f 92       	push	r6
 62a:	7f 92       	push	r7
 62c:	8f 92       	push	r8
 62e:	9f 92       	push	r9
 630:	af 92       	push	r10
 632:	bf 92       	push	r11
 634:	cf 92       	push	r12
 636:	df 92       	push	r13
 638:	ef 92       	push	r14
 63a:	ff 92       	push	r15
 63c:	0f 93       	push	r16
 63e:	1f 93       	push	r17
 640:	cf 93       	push	r28
 642:	df 93       	push	r29
 644:	6c 01       	movw	r12, r24
 646:	7b 01       	movw	r14, r22
	for(int i=0;i<size;i++){
 648:	00 e0       	ldi	r16, 0x00	; 0
 64a:	10 e0       	ldi	r17, 0x00	; 0
 64c:	38 c0       	rjmp	.+112    	; 0x6be <separate_num+0x96>
	int count = 1, num = arr[i];
 64e:	e8 01       	movw	r28, r16
 650:	cc 0f       	add	r28, r28
 652:	dd 1f       	adc	r29, r29
 654:	cc 0d       	add	r28, r12
 656:	dd 1d       	adc	r29, r13
 658:	88 80       	ld	r8, Y
 65a:	99 80       	ldd	r9, Y+1	; 0x01
	seven_seg_init();
 65c:	0e 94 a5 03 	call	0x74a	; 0x74a <seven_seg_init>
	timer0_init();
 660:	0e 94 21 04 	call	0x842	; 0x842 <timer0_init>

	while (g_tick != NUMBER_OF_OVERFLOWS) {
 664:	21 c0       	rjmp	.+66     	; 0x6a8 <separate_num+0x80>
		++g_tick;
 666:	8f 5f       	subi	r24, 0xFF	; 255
 668:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <g_tick>

		if (!num)
 66c:	81 14       	cp	r8, r1
 66e:	91 04       	cpc	r9, r1
 670:	a1 f4       	brne	.+40     	; 0x69a <separate_num+0x72>
 672:	21 e0       	ldi	r18, 0x01	; 1
 674:	30 e0       	ldi	r19, 0x00	; 0
		goto zero;

		while (num > 0) {
			zero:
			display_on_seven_seg(num % 10, count++);
 676:	59 01       	movw	r10, r18
 678:	8f ef       	ldi	r24, 0xFF	; 255
 67a:	a8 1a       	sub	r10, r24
 67c:	b8 0a       	sbc	r11, r24
 67e:	c4 01       	movw	r24, r8
 680:	6a e0       	ldi	r22, 0x0A	; 10
 682:	70 e0       	ldi	r23, 0x00	; 0
 684:	0e 94 2b 04 	call	0x856	; 0x856 <__divmodhi4>
 688:	66 2e       	mov	r6, r22
 68a:	77 2e       	mov	r7, r23
 68c:	b9 01       	movw	r22, r18
 68e:	0e 94 a9 03 	call	0x752	; 0x752 <display_on_seven_seg>
			num /= 10;
 692:	86 2c       	mov	r8, r6
 694:	97 2c       	mov	r9, r7
		if (!num)
		goto zero;

		while (num > 0) {
			zero:
			display_on_seven_seg(num % 10, count++);
 696:	95 01       	movw	r18, r10
 698:	02 c0       	rjmp	.+4      	; 0x69e <separate_num+0x76>
 69a:	21 e0       	ldi	r18, 0x01	; 1
 69c:	30 e0       	ldi	r19, 0x00	; 0
		++g_tick;

		if (!num)
		goto zero;

		while (num > 0) {
 69e:	18 14       	cp	r1, r8
 6a0:	19 04       	cpc	r1, r9
 6a2:	4c f3       	brlt	.-46     	; 0x676 <separate_num+0x4e>
			zero:
			display_on_seven_seg(num % 10, count++);
			num /= 10;
		}
		num = arr[i];
 6a4:	88 80       	ld	r8, Y
 6a6:	99 80       	ldd	r9, Y+1	; 0x01
	for(int i=0;i<size;i++){
	int count = 1, num = arr[i];
	seven_seg_init();
	timer0_init();

	while (g_tick != NUMBER_OF_OVERFLOWS) {
 6a8:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <g_tick>
 6ac:	8d 33       	cpi	r24, 0x3D	; 61
 6ae:	d9 f6       	brne	.-74     	; 0x666 <separate_num+0x3e>
		}
		num = arr[i];
		count = 1;
	}

	g_tick = 0;
 6b0:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <g_tick>
	DDRB &= ~0x17;
 6b4:	87 b3       	in	r24, 0x17	; 23
 6b6:	88 7e       	andi	r24, 0xE8	; 232
 6b8:	87 bb       	out	0x17, r24	; 23
	*num = *num * 10 + ans;
}


void separate_num(int *arr, int size) {
	for(int i=0;i<size;i++){
 6ba:	0f 5f       	subi	r16, 0xFF	; 255
 6bc:	1f 4f       	sbci	r17, 0xFF	; 255
 6be:	0e 15       	cp	r16, r14
 6c0:	1f 05       	cpc	r17, r15
 6c2:	2c f2       	brlt	.-118    	; 0x64e <separate_num+0x26>
	}

	g_tick = 0;
	DDRB &= ~0x17;
	}
}
 6c4:	df 91       	pop	r29
 6c6:	cf 91       	pop	r28
 6c8:	1f 91       	pop	r17
 6ca:	0f 91       	pop	r16
 6cc:	ff 90       	pop	r15
 6ce:	ef 90       	pop	r14
 6d0:	df 90       	pop	r13
 6d2:	cf 90       	pop	r12
 6d4:	bf 90       	pop	r11
 6d6:	af 90       	pop	r10
 6d8:	9f 90       	pop	r9
 6da:	8f 90       	pop	r8
 6dc:	7f 90       	pop	r7
 6de:	6f 90       	pop	r6
 6e0:	08 95       	ret

000006e2 <sort>:




void sort(int *arr, int size) {
 6e2:	ef 92       	push	r14
 6e4:	ff 92       	push	r15
 6e6:	0f 93       	push	r16
 6e8:	1f 93       	push	r17
 6ea:	cf 93       	push	r28
 6ec:	df 93       	push	r29
	for (int i = 0; i < size; i++) {
 6ee:	c0 e0       	ldi	r28, 0x00	; 0
 6f0:	d0 e0       	ldi	r29, 0x00	; 0
 6f2:	21 c0       	rjmp	.+66     	; 0x736 <sort+0x54>
		for (int j = i+1; j < size; j++) {
 6f4:	8e 01       	movw	r16, r28
 6f6:	0f 5f       	subi	r16, 0xFF	; 255
 6f8:	1f 4f       	sbci	r17, 0xFF	; 255
 6fa:	98 01       	movw	r18, r16
 6fc:	18 c0       	rjmp	.+48     	; 0x72e <sort+0x4c>
			if (arr[i] > arr[j]) {
 6fe:	de 01       	movw	r26, r28
 700:	aa 0f       	add	r26, r26
 702:	bb 1f       	adc	r27, r27
 704:	a8 0f       	add	r26, r24
 706:	b9 1f       	adc	r27, r25
 708:	4d 91       	ld	r20, X+
 70a:	5c 91       	ld	r21, X
 70c:	11 97       	sbiw	r26, 0x01	; 1
 70e:	f9 01       	movw	r30, r18
 710:	ee 0f       	add	r30, r30
 712:	ff 1f       	adc	r31, r31
 714:	e8 0f       	add	r30, r24
 716:	f9 1f       	adc	r31, r25
 718:	e0 80       	ld	r14, Z
 71a:	f1 80       	ldd	r15, Z+1	; 0x01
 71c:	e4 16       	cp	r14, r20
 71e:	f5 06       	cpc	r15, r21
 720:	24 f4       	brge	.+8      	; 0x72a <sort+0x48>
				int temp = arr[i];
				arr[i] = arr[j];
 722:	ed 92       	st	X+, r14
 724:	fc 92       	st	X, r15
				arr[j] = temp;
 726:	51 83       	std	Z+1, r21	; 0x01
 728:	40 83       	st	Z, r20



void sort(int *arr, int size) {
	for (int i = 0; i < size; i++) {
		for (int j = i+1; j < size; j++) {
 72a:	2f 5f       	subi	r18, 0xFF	; 255
 72c:	3f 4f       	sbci	r19, 0xFF	; 255
 72e:	26 17       	cp	r18, r22
 730:	37 07       	cpc	r19, r23
 732:	2c f3       	brlt	.-54     	; 0x6fe <sort+0x1c>




void sort(int *arr, int size) {
	for (int i = 0; i < size; i++) {
 734:	e8 01       	movw	r28, r16
 736:	c6 17       	cp	r28, r22
 738:	d7 07       	cpc	r29, r23
 73a:	e4 f2       	brlt	.-72     	; 0x6f4 <sort+0x12>
				arr[i] = arr[j];
				arr[j] = temp;
			}
		}
	}
}
 73c:	df 91       	pop	r29
 73e:	cf 91       	pop	r28
 740:	1f 91       	pop	r17
 742:	0f 91       	pop	r16
 744:	ff 90       	pop	r15
 746:	ef 90       	pop	r14
 748:	08 95       	ret

0000074a <seven_seg_init>:
 */ 

#include "SevSeg.h"

void seven_seg_init(){
	DDRB|=0x17;
 74a:	87 b3       	in	r24, 0x17	; 23
 74c:	87 61       	ori	r24, 0x17	; 23
 74e:	87 bb       	out	0x17, r24	; 23
 750:	08 95       	ret

00000752 <display_on_seven_seg>:
}


void display_on_seven_seg(int num,int pin){
 752:	cf 93       	push	r28
 754:	df 93       	push	r29
 756:	cd b7       	in	r28, 0x3d	; 61
 758:	de b7       	in	r29, 0x3e	; 62
 75a:	64 97       	sbiw	r28, 0x14	; 20
 75c:	0f b6       	in	r0, 0x3f	; 63
 75e:	f8 94       	cli
 760:	de bf       	out	0x3e, r29	; 62
 762:	0f be       	out	0x3f, r0	; 63
 764:	cd bf       	out	0x3d, r28	; 61
	SET_BIT(DDRA,p2);
 766:	2a b3       	in	r18, 0x1a	; 26
 768:	24 60       	ori	r18, 0x04	; 4
 76a:	2a bb       	out	0x1a, r18	; 26
	SET_BIT(DDRA,p3);
 76c:	2a b3       	in	r18, 0x1a	; 26
 76e:	28 60       	ori	r18, 0x08	; 8
 770:	2a bb       	out	0x1a, r18	; 26
	SET_BIT(DDRB,p5);
 772:	27 b3       	in	r18, 0x17	; 23
 774:	20 62       	ori	r18, 0x20	; 32
 776:	27 bb       	out	0x17, r18	; 23
	SET_BIT(DDRB,p6);
 778:	27 b3       	in	r18, 0x17	; 23
 77a:	20 64       	ori	r18, 0x40	; 64
 77c:	27 bb       	out	0x17, r18	; 23
	
	
	
	SET_BIT(PORTA,p2);
 77e:	2b b3       	in	r18, 0x1b	; 27
 780:	24 60       	ori	r18, 0x04	; 4
 782:	2b bb       	out	0x1b, r18	; 27
	SET_BIT(PORTA,p3);
 784:	2b b3       	in	r18, 0x1b	; 27
 786:	28 60       	ori	r18, 0x08	; 8
 788:	2b bb       	out	0x1b, r18	; 27
	SET_BIT(PORTB,p5);
 78a:	28 b3       	in	r18, 0x18	; 24
 78c:	20 62       	ori	r18, 0x20	; 32
 78e:	28 bb       	out	0x18, r18	; 24
	SET_BIT(PORTB,p6);
 790:	28 b3       	in	r18, 0x18	; 24
 792:	20 64       	ori	r18, 0x40	; 64
 794:	28 bb       	out	0x18, r18	; 24

	PORTB&=~0b00010111;
 796:	28 b3       	in	r18, 0x18	; 24
 798:	28 7e       	andi	r18, 0xE8	; 232
 79a:	28 bb       	out	0x18, r18	; 24
	const arr[10]={0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x10,0x11};
 79c:	24 e1       	ldi	r18, 0x14	; 20
 79e:	e0 e7       	ldi	r30, 0x70	; 112
 7a0:	f0 e0       	ldi	r31, 0x00	; 0
 7a2:	de 01       	movw	r26, r28
 7a4:	11 96       	adiw	r26, 0x01	; 1
 7a6:	01 90       	ld	r0, Z+
 7a8:	0d 92       	st	X+, r0
 7aa:	2a 95       	dec	r18
 7ac:	e1 f7       	brne	.-8      	; 0x7a6 <display_on_seven_seg+0x54>
	PORTB|=arr[num];
 7ae:	28 b3       	in	r18, 0x18	; 24
 7b0:	88 0f       	add	r24, r24
 7b2:	99 1f       	adc	r25, r25
 7b4:	e1 e0       	ldi	r30, 0x01	; 1
 7b6:	f0 e0       	ldi	r31, 0x00	; 0
 7b8:	ec 0f       	add	r30, r28
 7ba:	fd 1f       	adc	r31, r29
 7bc:	e8 0f       	add	r30, r24
 7be:	f9 1f       	adc	r31, r25
 7c0:	80 81       	ld	r24, Z
 7c2:	82 2b       	or	r24, r18
 7c4:	88 bb       	out	0x18, r24	; 24
//	CLR_BIT(PORTA,2);//2
//	CLR_BIT(PORTA,3);//1 first 7-seg from the right
//	CLR_BIT(PORTB,5);//3
//	CLR_BIT(PORTB,6);//4

if(pin<3){
 7c6:	63 30       	cpi	r22, 0x03	; 3
 7c8:	71 05       	cpc	r23, r1
 7ca:	dc f4       	brge	.+54     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
	if(pin == 1)
 7cc:	61 30       	cpi	r22, 0x01	; 1
 7ce:	71 05       	cpc	r23, r1
 7d0:	11 f4       	brne	.+4      	; 0x7d6 <display_on_seven_seg+0x84>
		pin+=2;
 7d2:	6e 5f       	subi	r22, 0xFE	; 254
 7d4:	7f 4f       	sbci	r23, 0xFF	; 255
		CLR_BIT(PORTA,pin);
 7d6:	2b b3       	in	r18, 0x1b	; 27
 7d8:	81 e0       	ldi	r24, 0x01	; 1
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <display_on_seven_seg+0x90>
 7de:	88 0f       	add	r24, r24
 7e0:	99 1f       	adc	r25, r25
 7e2:	6a 95       	dec	r22
 7e4:	e2 f7       	brpl	.-8      	; 0x7de <display_on_seven_seg+0x8c>
 7e6:	98 2f       	mov	r25, r24
 7e8:	90 95       	com	r25
 7ea:	92 23       	and	r25, r18
 7ec:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7ee:	ef e8       	ldi	r30, 0x8F	; 143
 7f0:	f1 e0       	ldi	r31, 0x01	; 1
 7f2:	31 97       	sbiw	r30, 0x01	; 1
 7f4:	f1 f7       	brne	.-4      	; 0x7f2 <display_on_seven_seg+0xa0>
 7f6:	00 c0       	rjmp	.+0      	; 0x7f8 <display_on_seven_seg+0xa6>
 7f8:	00 00       	nop
		_delay_us(100); // microsecond 
		SET_BIT(PORTA,pin);
 7fa:	9b b3       	in	r25, 0x1b	; 27
 7fc:	89 2b       	or	r24, r25
 7fe:	8b bb       	out	0x1b, r24	; 27
 800:	17 c0       	rjmp	.+46     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
	
}
else{
	pin+=2;
 802:	6e 5f       	subi	r22, 0xFE	; 254
 804:	7f 4f       	sbci	r23, 0xFF	; 255
	CLR_BIT(PORTB,pin);
 806:	28 b3       	in	r18, 0x18	; 24
 808:	81 e0       	ldi	r24, 0x01	; 1
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	02 c0       	rjmp	.+4      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 80e:	88 0f       	add	r24, r24
 810:	99 1f       	adc	r25, r25
 812:	6a 95       	dec	r22
 814:	e2 f7       	brpl	.-8      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 816:	98 2f       	mov	r25, r24
 818:	90 95       	com	r25
 81a:	92 23       	and	r25, r18
 81c:	98 bb       	out	0x18, r25	; 24
 81e:	ef e8       	ldi	r30, 0x8F	; 143
 820:	f1 e0       	ldi	r31, 0x01	; 1
 822:	31 97       	sbiw	r30, 0x01	; 1
 824:	f1 f7       	brne	.-4      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 826:	00 c0       	rjmp	.+0      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 828:	00 00       	nop
		_delay_us(100);
	SET_BIT(PORTB,pin);
 82a:	98 b3       	in	r25, 0x18	; 24
 82c:	89 2b       	or	r24, r25
 82e:	88 bb       	out	0x18, r24	; 24
}

 830:	64 96       	adiw	r28, 0x14	; 20
 832:	0f b6       	in	r0, 0x3f	; 63
 834:	f8 94       	cli
 836:	de bf       	out	0x3e, r29	; 62
 838:	0f be       	out	0x3f, r0	; 63
 83a:	cd bf       	out	0x3d, r28	; 61
 83c:	df 91       	pop	r29
 83e:	cf 91       	pop	r28
 840:	08 95       	ret

00000842 <timer0_init>:
#include "register.h"



void timer0_init(){
	TCNT0=0;
 842:	12 be       	out	0x32, r1	; 50
	SET_BIT(TIMSK,TOIE0);
 844:	89 b7       	in	r24, 0x39	; 57
 846:	81 60       	ori	r24, 0x01	; 1
 848:	89 bf       	out	0x39, r24	; 57
	
	TCCR0= (1<<FOC0)|(1<<CS02)|(1<<CS00);
 84a:	85 e8       	ldi	r24, 0x85	; 133
 84c:	83 bf       	out	0x33, r24	; 51
	
	SET_BIT(SREG,I_BIT);
 84e:	8f b7       	in	r24, 0x3f	; 63
 850:	80 68       	ori	r24, 0x80	; 128
 852:	8f bf       	out	0x3f, r24	; 63
 854:	08 95       	ret

00000856 <__divmodhi4>:
 856:	97 fb       	bst	r25, 7
 858:	07 2e       	mov	r0, r23
 85a:	16 f4       	brtc	.+4      	; 0x860 <__stack+0x1>
 85c:	00 94       	com	r0
 85e:	07 d0       	rcall	.+14     	; 0x86e <__divmodhi4_neg1>
 860:	77 fd       	sbrc	r23, 7
 862:	09 d0       	rcall	.+18     	; 0x876 <__divmodhi4_neg2>
 864:	0e 94 3f 04 	call	0x87e	; 0x87e <__udivmodhi4>
 868:	07 fc       	sbrc	r0, 7
 86a:	05 d0       	rcall	.+10     	; 0x876 <__divmodhi4_neg2>
 86c:	3e f4       	brtc	.+14     	; 0x87c <__divmodhi4_exit>

0000086e <__divmodhi4_neg1>:
 86e:	90 95       	com	r25
 870:	81 95       	neg	r24
 872:	9f 4f       	sbci	r25, 0xFF	; 255
 874:	08 95       	ret

00000876 <__divmodhi4_neg2>:
 876:	70 95       	com	r23
 878:	61 95       	neg	r22
 87a:	7f 4f       	sbci	r23, 0xFF	; 255

0000087c <__divmodhi4_exit>:
 87c:	08 95       	ret

0000087e <__udivmodhi4>:
 87e:	aa 1b       	sub	r26, r26
 880:	bb 1b       	sub	r27, r27
 882:	51 e1       	ldi	r21, 0x11	; 17
 884:	07 c0       	rjmp	.+14     	; 0x894 <__udivmodhi4_ep>

00000886 <__udivmodhi4_loop>:
 886:	aa 1f       	adc	r26, r26
 888:	bb 1f       	adc	r27, r27
 88a:	a6 17       	cp	r26, r22
 88c:	b7 07       	cpc	r27, r23
 88e:	10 f0       	brcs	.+4      	; 0x894 <__udivmodhi4_ep>
 890:	a6 1b       	sub	r26, r22
 892:	b7 0b       	sbc	r27, r23

00000894 <__udivmodhi4_ep>:
 894:	88 1f       	adc	r24, r24
 896:	99 1f       	adc	r25, r25
 898:	5a 95       	dec	r21
 89a:	a9 f7       	brne	.-22     	; 0x886 <__udivmodhi4_loop>
 89c:	80 95       	com	r24
 89e:	90 95       	com	r25
 8a0:	bc 01       	movw	r22, r24
 8a2:	cd 01       	movw	r24, r26
 8a4:	08 95       	ret

000008a6 <_exit>:
 8a6:	f8 94       	cli

000008a8 <__stop_program>:
 8a8:	ff cf       	rjmp	.-2      	; 0x8a8 <__stop_program>
