
final2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000084a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  0000084a  000008de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800084  00800084  00000902  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000902  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000934  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000970  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013a6  00000000  00000000  00000a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ba0  00000000  00000000  00001e26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cfa  00000000  00000000  000029c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000258  00000000  00000000  000036c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000475  00000000  00000000  00003918  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ca8  00000000  00000000  00003d8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00004a35  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 ea 03 	jmp	0x7d4	; 0x7d4 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e4       	ldi	r30, 0x4A	; 74
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 38       	cpi	r26, 0x84	; 132
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e8       	ldi	r26, 0x84	; 132
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 38       	cpi	r26, 0x87	; 135
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4c 02 	call	0x498	; 0x498 <main>
  8a:	0c 94 23 04 	jmp	0x846	; 0x846 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <keypad_init>:
{'1','2','3','-'},
{'e','0','=','+'}	
};

void keypad_init(){
	SET_BIT(ROW_DDR,p2);
  92:	84 b3       	in	r24, 0x14	; 20
  94:	84 60       	ori	r24, 0x04	; 4
  96:	84 bb       	out	0x14, r24	; 20
	SET_BIT(ROW_DDR,p3);
  98:	84 b3       	in	r24, 0x14	; 20
  9a:	88 60       	ori	r24, 0x08	; 8
  9c:	84 bb       	out	0x14, r24	; 20
	SET_BIT(ROW_DDR,p4);
  9e:	84 b3       	in	r24, 0x14	; 20
  a0:	80 61       	ori	r24, 0x10	; 16
  a2:	84 bb       	out	0x14, r24	; 20
	SET_BIT(ROW_DDR,p5);
  a4:	84 b3       	in	r24, 0x14	; 20
  a6:	80 62       	ori	r24, 0x20	; 32
  a8:	84 bb       	out	0x14, r24	; 20
	
	CLR_BIT(COL_DDR,p7);
  aa:	81 b3       	in	r24, 0x11	; 17
  ac:	8f 77       	andi	r24, 0x7F	; 127
  ae:	81 bb       	out	0x11, r24	; 17
	CLR_BIT(COL_DDR,p6);
  b0:	81 b3       	in	r24, 0x11	; 17
  b2:	8f 7b       	andi	r24, 0xBF	; 191
  b4:	81 bb       	out	0x11, r24	; 17
	CLR_BIT(COL_DDR,p5);
  b6:	81 b3       	in	r24, 0x11	; 17
  b8:	8f 7d       	andi	r24, 0xDF	; 223
  ba:	81 bb       	out	0x11, r24	; 17
	CLR_BIT(COL_DDR,p3);
  bc:	81 b3       	in	r24, 0x11	; 17
  be:	87 7f       	andi	r24, 0xF7	; 247
  c0:	81 bb       	out	0x11, r24	; 17
	
	SET_BIT(COL_PORT,p7);
  c2:	82 b3       	in	r24, 0x12	; 18
  c4:	80 68       	ori	r24, 0x80	; 128
  c6:	82 bb       	out	0x12, r24	; 18
	SET_BIT(COL_PORT,p6);
  c8:	82 b3       	in	r24, 0x12	; 18
  ca:	80 64       	ori	r24, 0x40	; 64
  cc:	82 bb       	out	0x12, r24	; 18
	SET_BIT(COL_PORT,p5);
  ce:	82 b3       	in	r24, 0x12	; 18
  d0:	80 62       	ori	r24, 0x20	; 32
  d2:	82 bb       	out	0x12, r24	; 18
	SET_BIT(COL_PORT,p3);
  d4:	82 b3       	in	r24, 0x12	; 18
  d6:	88 60       	ori	r24, 0x08	; 8
  d8:	82 bb       	out	0x12, r24	; 18
  da:	08 95       	ret

000000dc <keypad_get_value>:


unsigned char keypad_get_value(){
	
	unsigned char ans=inva;
	for(int row=5;row>=2;row--){
  dc:	65 e0       	ldi	r22, 0x05	; 5
  de:	70 e0       	ldi	r23, 0x00	; 0
}


unsigned char keypad_get_value(){
	
	unsigned char ans=inva;
  e0:	8f ef       	ldi	r24, 0xFF	; 255
	for(int row=5;row>=2;row--){
  e2:	50 c0       	rjmp	.+160    	; 0x184 <keypad_get_value+0xa8>
		ROW_PORT|=0b00111100;
  e4:	95 b3       	in	r25, 0x15	; 21
  e6:	9c 63       	ori	r25, 0x3C	; 60
  e8:	95 bb       	out	0x15, r25	; 21
		CLR_BIT(ROW_PORT,row);
  ea:	95 b3       	in	r25, 0x15	; 21
  ec:	21 e0       	ldi	r18, 0x01	; 1
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	06 2e       	mov	r0, r22
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <keypad_get_value+0x1c>
  f4:	22 0f       	add	r18, r18
  f6:	33 1f       	adc	r19, r19
  f8:	0a 94       	dec	r0
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <keypad_get_value+0x18>
  fc:	20 95       	com	r18
  fe:	29 23       	and	r18, r25
 100:	25 bb       	out	0x15, r18	; 21
		for(int col=7;col>=3;col--){
 102:	27 e0       	ldi	r18, 0x07	; 7
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	39 c0       	rjmp	.+114    	; 0x17a <keypad_get_value+0x9e>
		if(col==4)col--;
 108:	24 30       	cpi	r18, 0x04	; 4
 10a:	31 05       	cpc	r19, r1
 10c:	11 f4       	brne	.+4      	; 0x112 <keypad_get_value+0x36>
 10e:	21 50       	subi	r18, 0x01	; 1
 110:	31 09       	sbc	r19, r1
		if(GET_BIT(COL_PIN,col)==0){
 112:	40 b3       	in	r20, 0x10	; 16
 114:	50 e0       	ldi	r21, 0x00	; 0
 116:	02 2e       	mov	r0, r18
 118:	02 c0       	rjmp	.+4      	; 0x11e <keypad_get_value+0x42>
 11a:	55 95       	asr	r21
 11c:	47 95       	ror	r20
 11e:	0a 94       	dec	r0
 120:	e2 f7       	brpl	.-8      	; 0x11a <keypad_get_value+0x3e>
 122:	40 fd       	sbrc	r20, 0
 124:	28 c0       	rjmp	.+80     	; 0x176 <keypad_get_value+0x9a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	4f ef       	ldi	r20, 0xFF	; 255
 128:	5b ed       	ldi	r21, 0xDB	; 219
 12a:	95 e0       	ldi	r25, 0x05	; 5
 12c:	41 50       	subi	r20, 0x01	; 1
 12e:	50 40       	sbci	r21, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <keypad_get_value+0x50>
 134:	00 c0       	rjmp	.+0      	; 0x136 <keypad_get_value+0x5a>
 136:	00 00       	nop
			_delay_ms(120);
			if(GET_BIT(COL_PIN,col)==0){
 138:	40 b3       	in	r20, 0x10	; 16
 13a:	50 e0       	ldi	r21, 0x00	; 0
 13c:	02 2e       	mov	r0, r18
 13e:	02 c0       	rjmp	.+4      	; 0x144 <keypad_get_value+0x68>
 140:	55 95       	asr	r21
 142:	47 95       	ror	r20
 144:	0a 94       	dec	r0
 146:	e2 f7       	brpl	.-8      	; 0x140 <keypad_get_value+0x64>
 148:	40 fd       	sbrc	r20, 0
 14a:	15 c0       	rjmp	.+42     	; 0x176 <keypad_get_value+0x9a>
				if(col!=3)
 14c:	23 30       	cpi	r18, 0x03	; 3
 14e:	31 05       	cpc	r19, r1
 150:	91 f0       	breq	.+36     	; 0x176 <keypad_get_value+0x9a>
					ans=arr[5-row][7-col];
 152:	85 e0       	ldi	r24, 0x05	; 5
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	86 1b       	sub	r24, r22
 158:	97 0b       	sbc	r25, r23
 15a:	47 e0       	ldi	r20, 0x07	; 7
 15c:	50 e0       	ldi	r21, 0x00	; 0
 15e:	42 1b       	sub	r20, r18
 160:	53 0b       	sbc	r21, r19
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	80 5a       	subi	r24, 0xA0	; 160
 16c:	9f 4f       	sbci	r25, 0xFF	; 255
 16e:	fc 01       	movw	r30, r24
 170:	e4 0f       	add	r30, r20
 172:	f5 1f       	adc	r31, r21
 174:	80 81       	ld	r24, Z
	
	unsigned char ans=inva;
	for(int row=5;row>=2;row--){
		ROW_PORT|=0b00111100;
		CLR_BIT(ROW_PORT,row);
		for(int col=7;col>=3;col--){
 176:	21 50       	subi	r18, 0x01	; 1
 178:	31 09       	sbc	r19, r1
 17a:	23 30       	cpi	r18, 0x03	; 3
 17c:	31 05       	cpc	r19, r1
 17e:	24 f6       	brge	.-120    	; 0x108 <keypad_get_value+0x2c>


unsigned char keypad_get_value(){
	
	unsigned char ans=inva;
	for(int row=5;row>=2;row--){
 180:	61 50       	subi	r22, 0x01	; 1
 182:	71 09       	sbc	r23, r1
 184:	62 30       	cpi	r22, 0x02	; 2
 186:	71 05       	cpc	r23, r1
 188:	0c f0       	brlt	.+2      	; 0x18c <keypad_get_value+0xb0>
 18a:	ac cf       	rjmp	.-168    	; 0xe4 <keypad_get_value+0x8>
				}
			}
		}
	}
	return ans;
 18c:	08 95       	ret

0000018e <len_num>:

void LCD_string(unsigned char* str){
	for(int i=0;str[i]!='\0';i++){
		LCD_WriteChar(str[i]);
	}
}
 18e:	20 e0       	ldi	r18, 0x00	; 0
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	07 c0       	rjmp	.+14     	; 0x1a2 <len_num+0x14>
 194:	6a e0       	ldi	r22, 0x0A	; 10
 196:	70 e0       	ldi	r23, 0x00	; 0
 198:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__divmodhi4>
 19c:	cb 01       	movw	r24, r22
 19e:	2f 5f       	subi	r18, 0xFF	; 255
 1a0:	3f 4f       	sbci	r19, 0xFF	; 255
 1a2:	18 16       	cp	r1, r24
 1a4:	19 06       	cpc	r1, r25
 1a6:	b4 f3       	brlt	.-20     	; 0x194 <len_num+0x6>
 1a8:	c9 01       	movw	r24, r18
 1aa:	08 95       	ret

000001ac <LCD_command>:
 1ac:	9b b3       	in	r25, 0x1b	; 27
 1ae:	97 7f       	andi	r25, 0xF7	; 247
 1b0:	9b bb       	out	0x1b, r25	; 27
 1b2:	98 b3       	in	r25, 0x18	; 24
 1b4:	98 7e       	andi	r25, 0xE8	; 232
 1b6:	98 bb       	out	0x18, r25	; 24
 1b8:	28 2f       	mov	r18, r24
 1ba:	22 95       	swap	r18
 1bc:	2f 70       	andi	r18, 0x0F	; 15
 1be:	92 2f       	mov	r25, r18
 1c0:	98 70       	andi	r25, 0x08	; 8
 1c2:	49 2f       	mov	r20, r25
 1c4:	50 e0       	ldi	r21, 0x00	; 0
 1c6:	44 0f       	add	r20, r20
 1c8:	55 1f       	adc	r21, r21
 1ca:	27 70       	andi	r18, 0x07	; 7
 1cc:	42 2b       	or	r20, r18
 1ce:	98 b3       	in	r25, 0x18	; 24
 1d0:	49 2b       	or	r20, r25
 1d2:	48 bb       	out	0x18, r20	; 24
 1d4:	9b b3       	in	r25, 0x1b	; 27
 1d6:	9b 7f       	andi	r25, 0xFB	; 251
 1d8:	9b bb       	out	0x1b, r25	; 27
 1da:	9b b3       	in	r25, 0x1b	; 27
 1dc:	94 60       	ori	r25, 0x04	; 4
 1de:	9b bb       	out	0x1b, r25	; 27
 1e0:	ef e9       	ldi	r30, 0x9F	; 159
 1e2:	ff e0       	ldi	r31, 0x0F	; 15
 1e4:	31 97       	sbiw	r30, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <LCD_command+0x38>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <LCD_command+0x3e>
 1ea:	00 00       	nop
 1ec:	9b b3       	in	r25, 0x1b	; 27
 1ee:	9b 7f       	andi	r25, 0xFB	; 251
 1f0:	9b bb       	out	0x1b, r25	; 27
 1f2:	98 b3       	in	r25, 0x18	; 24
 1f4:	98 7e       	andi	r25, 0xE8	; 232
 1f6:	98 bb       	out	0x18, r25	; 24
 1f8:	98 2f       	mov	r25, r24
 1fa:	98 70       	andi	r25, 0x08	; 8
 1fc:	29 2f       	mov	r18, r25
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	22 0f       	add	r18, r18
 202:	33 1f       	adc	r19, r19
 204:	87 70       	andi	r24, 0x07	; 7
 206:	28 2b       	or	r18, r24
 208:	88 b3       	in	r24, 0x18	; 24
 20a:	28 2b       	or	r18, r24
 20c:	28 bb       	out	0x18, r18	; 24
 20e:	8b b3       	in	r24, 0x1b	; 27
 210:	8b 7f       	andi	r24, 0xFB	; 251
 212:	8b bb       	out	0x1b, r24	; 27
 214:	8b b3       	in	r24, 0x1b	; 27
 216:	84 60       	ori	r24, 0x04	; 4
 218:	8b bb       	out	0x1b, r24	; 27
 21a:	8f e9       	ldi	r24, 0x9F	; 159
 21c:	9f e0       	ldi	r25, 0x0F	; 15
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <LCD_command+0x72>
 222:	00 c0       	rjmp	.+0      	; 0x224 <LCD_command+0x78>
 224:	00 00       	nop
 226:	8b b3       	in	r24, 0x1b	; 27
 228:	8b 7f       	andi	r24, 0xFB	; 251
 22a:	8b bb       	out	0x1b, r24	; 27
 22c:	ef e1       	ldi	r30, 0x1F	; 31
 22e:	fe e4       	ldi	r31, 0x4E	; 78
 230:	31 97       	sbiw	r30, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <LCD_command+0x84>
 234:	00 c0       	rjmp	.+0      	; 0x236 <LCD_command+0x8a>
 236:	00 00       	nop
 238:	08 95       	ret

0000023a <LCD_init>:
 23a:	8a b3       	in	r24, 0x1a	; 26
 23c:	88 60       	ori	r24, 0x08	; 8
 23e:	8a bb       	out	0x1a, r24	; 26
 240:	8a b3       	in	r24, 0x1a	; 26
 242:	84 60       	ori	r24, 0x04	; 4
 244:	8a bb       	out	0x1a, r24	; 26
 246:	87 b3       	in	r24, 0x17	; 23
 248:	81 60       	ori	r24, 0x01	; 1
 24a:	87 bb       	out	0x17, r24	; 23
 24c:	87 b3       	in	r24, 0x17	; 23
 24e:	82 60       	ori	r24, 0x02	; 2
 250:	87 bb       	out	0x17, r24	; 23
 252:	87 b3       	in	r24, 0x17	; 23
 254:	84 60       	ori	r24, 0x04	; 4
 256:	87 bb       	out	0x17, r24	; 23
 258:	87 b3       	in	r24, 0x17	; 23
 25a:	80 61       	ori	r24, 0x10	; 16
 25c:	87 bb       	out	0x17, r24	; 23
 25e:	8f e5       	ldi	r24, 0x5F	; 95
 260:	9a ee       	ldi	r25, 0xEA	; 234
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <LCD_init+0x28>
 266:	00 c0       	rjmp	.+0      	; 0x268 <LCD_init+0x2e>
 268:	00 00       	nop
 26a:	86 e0       	ldi	r24, 0x06	; 6
 26c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_command>
 270:	82 e0       	ldi	r24, 0x02	; 2
 272:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_command>
 276:	88 e2       	ldi	r24, 0x28	; 40
 278:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_command>
 27c:	8c e0       	ldi	r24, 0x0C	; 12
 27e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_command>
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_command>
 288:	80 e8       	ldi	r24, 0x80	; 128
 28a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_command>
 28e:	08 95       	ret

00000290 <LCD_WriteChar>:
 290:	9b b3       	in	r25, 0x1b	; 27
 292:	98 60       	ori	r25, 0x08	; 8
 294:	9b bb       	out	0x1b, r25	; 27
 296:	98 b3       	in	r25, 0x18	; 24
 298:	98 7e       	andi	r25, 0xE8	; 232
 29a:	98 bb       	out	0x18, r25	; 24
 29c:	28 2f       	mov	r18, r24
 29e:	22 95       	swap	r18
 2a0:	2f 70       	andi	r18, 0x0F	; 15
 2a2:	92 2f       	mov	r25, r18
 2a4:	98 70       	andi	r25, 0x08	; 8
 2a6:	49 2f       	mov	r20, r25
 2a8:	50 e0       	ldi	r21, 0x00	; 0
 2aa:	44 0f       	add	r20, r20
 2ac:	55 1f       	adc	r21, r21
 2ae:	27 70       	andi	r18, 0x07	; 7
 2b0:	42 2b       	or	r20, r18
 2b2:	98 b3       	in	r25, 0x18	; 24
 2b4:	49 2b       	or	r20, r25
 2b6:	48 bb       	out	0x18, r20	; 24
 2b8:	9b b3       	in	r25, 0x1b	; 27
 2ba:	9b 7f       	andi	r25, 0xFB	; 251
 2bc:	9b bb       	out	0x1b, r25	; 27
 2be:	9b b3       	in	r25, 0x1b	; 27
 2c0:	94 60       	ori	r25, 0x04	; 4
 2c2:	9b bb       	out	0x1b, r25	; 27
 2c4:	ef e9       	ldi	r30, 0x9F	; 159
 2c6:	ff e0       	ldi	r31, 0x0F	; 15
 2c8:	31 97       	sbiw	r30, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <LCD_WriteChar+0x38>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <LCD_WriteChar+0x3e>
 2ce:	00 00       	nop
 2d0:	9b b3       	in	r25, 0x1b	; 27
 2d2:	9b 7f       	andi	r25, 0xFB	; 251
 2d4:	9b bb       	out	0x1b, r25	; 27
 2d6:	98 b3       	in	r25, 0x18	; 24
 2d8:	98 7e       	andi	r25, 0xE8	; 232
 2da:	98 bb       	out	0x18, r25	; 24
 2dc:	98 2f       	mov	r25, r24
 2de:	98 70       	andi	r25, 0x08	; 8
 2e0:	29 2f       	mov	r18, r25
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	22 0f       	add	r18, r18
 2e6:	33 1f       	adc	r19, r19
 2e8:	87 70       	andi	r24, 0x07	; 7
 2ea:	28 2b       	or	r18, r24
 2ec:	88 b3       	in	r24, 0x18	; 24
 2ee:	28 2b       	or	r18, r24
 2f0:	28 bb       	out	0x18, r18	; 24
 2f2:	8b b3       	in	r24, 0x1b	; 27
 2f4:	8b 7f       	andi	r24, 0xFB	; 251
 2f6:	8b bb       	out	0x1b, r24	; 27
 2f8:	8b b3       	in	r24, 0x1b	; 27
 2fa:	84 60       	ori	r24, 0x04	; 4
 2fc:	8b bb       	out	0x1b, r24	; 27
 2fe:	8f e9       	ldi	r24, 0x9F	; 159
 300:	9f e0       	ldi	r25, 0x0F	; 15
 302:	01 97       	sbiw	r24, 0x01	; 1
 304:	f1 f7       	brne	.-4      	; 0x302 <LCD_WriteChar+0x72>
 306:	00 c0       	rjmp	.+0      	; 0x308 <LCD_WriteChar+0x78>
 308:	00 00       	nop
 30a:	8b b3       	in	r24, 0x1b	; 27
 30c:	8b 7f       	andi	r24, 0xFB	; 251
 30e:	8b bb       	out	0x1b, r24	; 27
 310:	ef e1       	ldi	r30, 0x1F	; 31
 312:	fe e4       	ldi	r31, 0x4E	; 78
 314:	31 97       	sbiw	r30, 0x01	; 1
 316:	f1 f7       	brne	.-4      	; 0x314 <LCD_WriteChar+0x84>
 318:	00 c0       	rjmp	.+0      	; 0x31a <LCD_WriteChar+0x8a>
 31a:	00 00       	nop
 31c:	08 95       	ret

0000031e <LCD_clear>:
	
}

void LCD_clear(void){
	//PORTB &= 0b11101000;
	LCD_command(0x01);
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_command>
	LCD_data_PORT &=  0b11101000;
 324:	88 b3       	in	r24, 0x18	; 24
 326:	88 7e       	andi	r24, 0xE8	; 232
 328:	88 bb       	out	0x18, r24	; 24
 32a:	08 95       	ret

0000032c <LCD_Number>:
	for(int i=0;str[i]!='\0';i++){
		LCD_WriteChar(str[i]);
	}
}

void LCD_Number(int *arr ,const int size) {
 32c:	af 92       	push	r10
 32e:	bf 92       	push	r11
 330:	cf 92       	push	r12
 332:	df 92       	push	r13
 334:	ef 92       	push	r14
 336:	ff 92       	push	r15
 338:	0f 93       	push	r16
 33a:	1f 93       	push	r17
 33c:	cf 93       	push	r28
 33e:	df 93       	push	r29
 340:	5c 01       	movw	r10, r24
 342:	6b 01       	movw	r12, r22
	
	
	for (int i = 0 ; i < size;i++)
 344:	e1 2c       	mov	r14, r1
 346:	f1 2c       	mov	r15, r1
 348:	98 c0       	rjmp	.+304    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
	{
		int l=len_num(arr[i]);
 34a:	87 01       	movw	r16, r14
 34c:	00 0f       	add	r16, r16
 34e:	11 1f       	adc	r17, r17
 350:	0a 0d       	add	r16, r10
 352:	1b 1d       	adc	r17, r11
 354:	f8 01       	movw	r30, r16
 356:	80 81       	ld	r24, Z
 358:	91 81       	ldd	r25, Z+1	; 0x01
 35a:	0e 94 c7 00 	call	0x18e	; 0x18e <len_num>
 35e:	ec 01       	movw	r28, r24
		
		if(cursor_position <= 18 && l > 18-cursor_position){
 360:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__data_end>
 364:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__data_end+0x1>
 368:	83 31       	cpi	r24, 0x13	; 19
 36a:	91 05       	cpc	r25, r1
 36c:	5c f4       	brge	.+22     	; 0x384 <LCD_Number+0x58>
 36e:	22 e1       	ldi	r18, 0x12	; 18
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	a9 01       	movw	r20, r18
 374:	48 1b       	sub	r20, r24
 376:	59 0b       	sbc	r21, r25
 378:	4c 17       	cp	r20, r28
 37a:	5d 07       	cpc	r21, r29
 37c:	1c f4       	brge	.+6      	; 0x384 <LCD_Number+0x58>
			LCD_WriteChar(' ');
 37e:	80 e2       	ldi	r24, 0x20	; 32
 380:	0e 94 48 01 	call	0x290	; 0x290 <LCD_WriteChar>
		}
		if(l > 30-cursor_position ){
 384:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__data_end>
 388:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__data_end+0x1>
 38c:	8e e1       	ldi	r24, 0x1E	; 30
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	82 1b       	sub	r24, r18
 392:	93 0b       	sbc	r25, r19
 394:	8c 17       	cp	r24, r28
 396:	9d 07       	cpc	r25, r29
 398:	7c f4       	brge	.+30     	; 0x3b8 <LCD_Number+0x8c>
			LCD_clear();
 39a:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_clear>
 39e:	8f e3       	ldi	r24, 0x3F	; 63
 3a0:	9f e1       	ldi	r25, 0x1F	; 31
 3a2:	01 97       	sbiw	r24, 0x01	; 1
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <LCD_Number+0x76>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <LCD_Number+0x7c>
 3a8:	00 00       	nop
			_delay_ms(2);
			cursor_position = 0;
 3aa:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__data_end+0x1>
 3ae:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__data_end>
			LCD_command(0x80);
 3b2:	80 e8       	ldi	r24, 0x80	; 128
 3b4:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_command>
		}
		
		LCD_WriteChar(' ');
 3b8:	80 e2       	ldi	r24, 0x20	; 32
 3ba:	0e 94 48 01 	call	0x290	; 0x290 <LCD_WriteChar>
		cursor_position++;
 3be:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__data_end>
 3c2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__data_end+0x1>
 3c6:	01 96       	adiw	r24, 0x01	; 1
 3c8:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__data_end+0x1>
 3cc:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__data_end>
		
		for (int divisor = 1000; divisor > 1; divisor /= 10) {
 3d0:	c8 ee       	ldi	r28, 0xE8	; 232
 3d2:	d3 e0       	ldi	r29, 0x03	; 3
 3d4:	2d c0       	rjmp	.+90     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
			if (divisor > arr[i]){
 3d6:	f8 01       	movw	r30, r16
 3d8:	80 81       	ld	r24, Z
 3da:	91 81       	ldd	r25, Z+1	; 0x01
 3dc:	8c 17       	cp	r24, r28
 3de:	9d 07       	cpc	r25, r29
 3e0:	6c f4       	brge	.+26     	; 0x3fc <LCD_Number+0xd0>
			LCD_WriteChar(' ');
 3e2:	80 e2       	ldi	r24, 0x20	; 32
 3e4:	0e 94 48 01 	call	0x290	; 0x290 <LCD_WriteChar>
			cursor_position++;
 3e8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__data_end>
 3ec:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__data_end+0x1>
 3f0:	01 96       	adiw	r24, 0x01	; 1
 3f2:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__data_end+0x1>
 3f6:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__data_end>
 3fa:	14 c0       	rjmp	.+40     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
			}
			else {
				LCD_WriteChar(arr[i] / divisor % 10 + '0');
 3fc:	be 01       	movw	r22, r28
 3fe:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__divmodhi4>
 402:	cb 01       	movw	r24, r22
 404:	6a e0       	ldi	r22, 0x0A	; 10
 406:	70 e0       	ldi	r23, 0x00	; 0
 408:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__divmodhi4>
 40c:	80 5d       	subi	r24, 0xD0	; 208
 40e:	0e 94 48 01 	call	0x290	; 0x290 <LCD_WriteChar>
				cursor_position++;
 412:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__data_end>
 416:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__data_end+0x1>
 41a:	01 96       	adiw	r24, 0x01	; 1
 41c:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__data_end+0x1>
 420:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__data_end>
		}
		
		LCD_WriteChar(' ');
		cursor_position++;
		
		for (int divisor = 1000; divisor > 1; divisor /= 10) {
 424:	ce 01       	movw	r24, r28
 426:	6a e0       	ldi	r22, 0x0A	; 10
 428:	70 e0       	ldi	r23, 0x00	; 0
 42a:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__divmodhi4>
 42e:	eb 01       	movw	r28, r22
 430:	c2 30       	cpi	r28, 0x02	; 2
 432:	d1 05       	cpc	r29, r1
 434:	84 f6       	brge	.-96     	; 0x3d6 <LCD_Number+0xaa>
			else {
				LCD_WriteChar(arr[i] / divisor % 10 + '0');
				cursor_position++;
			}
		}
		LCD_WriteChar(arr[i] % 10 + '0');
 436:	f8 01       	movw	r30, r16
 438:	80 81       	ld	r24, Z
 43a:	91 81       	ldd	r25, Z+1	; 0x01
 43c:	6a e0       	ldi	r22, 0x0A	; 10
 43e:	70 e0       	ldi	r23, 0x00	; 0
 440:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__divmodhi4>
 444:	80 5d       	subi	r24, 0xD0	; 208
 446:	0e 94 48 01 	call	0x290	; 0x290 <LCD_WriteChar>
		cursor_position++;
 44a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__data_end>
 44e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__data_end+0x1>
 452:	01 96       	adiw	r24, 0x01	; 1
 454:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__data_end+0x1>
 458:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__data_end>
		LCD_WriteChar(' ');
 45c:	80 e2       	ldi	r24, 0x20	; 32
 45e:	0e 94 48 01 	call	0x290	; 0x290 <LCD_WriteChar>
 462:	ff ef       	ldi	r31, 0xFF	; 255
 464:	23 ed       	ldi	r18, 0xD3	; 211
 466:	40 e3       	ldi	r20, 0x30	; 48
 468:	f1 50       	subi	r31, 0x01	; 1
 46a:	20 40       	sbci	r18, 0x00	; 0
 46c:	40 40       	sbci	r20, 0x00	; 0
 46e:	e1 f7       	brne	.-8      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 470:	00 c0       	rjmp	.+0      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 472:	00 00       	nop
}

void LCD_Number(int *arr ,const int size) {
	
	
	for (int i = 0 ; i < size;i++)
 474:	5f ef       	ldi	r21, 0xFF	; 255
 476:	e5 1a       	sub	r14, r21
 478:	f5 0a       	sbc	r15, r21
 47a:	ec 14       	cp	r14, r12
 47c:	fd 04       	cpc	r15, r13
 47e:	0c f4       	brge	.+2      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 480:	64 cf       	rjmp	.-312    	; 0x34a <LCD_Number+0x1e>
		cursor_position++;
		LCD_WriteChar(' ');
		_delay_ms(1000);
	}
	
}
 482:	df 91       	pop	r29
 484:	cf 91       	pop	r28
 486:	1f 91       	pop	r17
 488:	0f 91       	pop	r16
 48a:	ff 90       	pop	r15
 48c:	ef 90       	pop	r14
 48e:	df 90       	pop	r13
 490:	cf 90       	pop	r12
 492:	bf 90       	pop	r11
 494:	af 90       	pop	r10
 496:	08 95       	ret

00000498 <main>:
#include "numbers.h"
#include "register.h"
#include "Math.h"

int main(void)
{
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	cd b7       	in	r28, 0x3d	; 61
 49e:	de b7       	in	r29, 0x3e	; 62
 4a0:	aa 97       	sbiw	r28, 0x2a	; 42
 4a2:	0f b6       	in	r0, 0x3f	; 63
 4a4:	f8 94       	cli
 4a6:	de bf       	out	0x3e, r29	; 62
 4a8:	0f be       	out	0x3f, r0	; 63
 4aa:	cd bf       	out	0x3d, r28	; 61
	const int fixed_size = 20;
	int arr[fixed_size],num=-1,size=0;
 4ac:	8f ef       	ldi	r24, 0xFF	; 255
 4ae:	9f ef       	ldi	r25, 0xFF	; 255
 4b0:	9a 83       	std	Y+2, r25	; 0x02
 4b2:	89 83       	std	Y+1, r24	; 0x01
	keypad_init();
 4b4:	0e 94 49 00 	call	0x92	; 0x92 <keypad_init>
	LCD_init();
 4b8:	0e 94 1d 01 	call	0x23a	; 0x23a <LCD_init>
#include "Math.h"

int main(void)
{
	const int fixed_size = 20;
	int arr[fixed_size],num=-1,size=0;
 4bc:	e1 2c       	mov	r14, r1
 4be:	f1 2c       	mov	r15, r1
	keypad_init();
	LCD_init();

    while (1){

		unsigned char ans=keypad_get_value();
 4c0:	0e 94 6e 00 	call	0xdc	; 0xdc <keypad_get_value>
 4c4:	18 2f       	mov	r17, r24

		if(ans=='='){
 4c6:	8d 33       	cpi	r24, 0x3D	; 61
 4c8:	d9 f4       	brne	.+54     	; 0x500 <main+0x68>
			if(num!=-1){
 4ca:	89 81       	ldd	r24, Y+1	; 0x01
 4cc:	9a 81       	ldd	r25, Y+2	; 0x02
 4ce:	01 96       	adiw	r24, 0x01	; 1
 4d0:	b9 f3       	breq	.-18     	; 0x4c0 <main+0x28>
				LCD_clear();
 4d2:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_clear>
				arr[size++]=num,num=-1;
 4d6:	f7 01       	movw	r30, r14
 4d8:	ee 0f       	add	r30, r30
 4da:	ff 1f       	adc	r31, r31
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	8c 0f       	add	r24, r28
 4e2:	9d 1f       	adc	r25, r29
 4e4:	e8 0f       	add	r30, r24
 4e6:	f9 1f       	adc	r31, r25
 4e8:	89 81       	ldd	r24, Y+1	; 0x01
 4ea:	9a 81       	ldd	r25, Y+2	; 0x02
 4ec:	93 83       	std	Z+3, r25	; 0x03
 4ee:	82 83       	std	Z+2, r24	; 0x02
 4f0:	8f ef       	ldi	r24, 0xFF	; 255
 4f2:	9f ef       	ldi	r25, 0xFF	; 255
 4f4:	9a 83       	std	Y+2, r25	; 0x02
 4f6:	89 83       	std	Y+1, r24	; 0x01
 4f8:	c7 01       	movw	r24, r14
 4fa:	01 96       	adiw	r24, 0x01	; 1
 4fc:	7c 01       	movw	r14, r24
 4fe:	e0 cf       	rjmp	.-64     	; 0x4c0 <main+0x28>
			}
		}
		else if(ans=='e'){
 500:	85 36       	cpi	r24, 0x65	; 101
 502:	29 f5       	brne	.+74     	; 0x54e <main+0xb6>
			if(num==-1){
 504:	89 81       	ldd	r24, Y+1	; 0x01
 506:	9a 81       	ldd	r25, Y+2	; 0x02
 508:	01 96       	adiw	r24, 0x01	; 1
 50a:	d1 f6       	brne	.-76     	; 0x4c0 <main+0x28>
			sort(arr,size);
 50c:	b7 01       	movw	r22, r14
 50e:	ce 01       	movw	r24, r28
 510:	03 96       	adiw	r24, 0x03	; 3
 512:	0e 94 34 03 	call	0x668	; 0x668 <sort>
			LCD_Number(arr,size);
 516:	b7 01       	movw	r22, r14
 518:	ce 01       	movw	r24, r28
 51a:	03 96       	adiw	r24, 0x03	; 3
 51c:	0e 94 96 01 	call	0x32c	; 0x32c <LCD_Number>
 520:	8f ef       	ldi	r24, 0xFF	; 255
 522:	93 ed       	ldi	r25, 0xD3	; 211
 524:	20 e3       	ldi	r18, 0x30	; 48
 526:	81 50       	subi	r24, 0x01	; 1
 528:	90 40       	sbci	r25, 0x00	; 0
 52a:	20 40       	sbci	r18, 0x00	; 0
 52c:	e1 f7       	brne	.-8      	; 0x526 <main+0x8e>
 52e:	00 c0       	rjmp	.+0      	; 0x530 <main+0x98>
 530:	00 00       	nop
			_delay_ms(1000);
			separate_num(arr,size);			
 532:	b7 01       	movw	r22, r14
 534:	ce 01       	movw	r24, r28
 536:	03 96       	adiw	r24, 0x03	; 3
 538:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <separate_num>
			LCD_init();
 53c:	0e 94 1d 01 	call	0x23a	; 0x23a <LCD_init>
			num=-1,size=0;
 540:	8f ef       	ldi	r24, 0xFF	; 255
 542:	9f ef       	ldi	r25, 0xFF	; 255
 544:	9a 83       	std	Y+2, r25	; 0x02
 546:	89 83       	std	Y+1, r24	; 0x01
 548:	e1 2c       	mov	r14, r1
 54a:	f1 2c       	mov	r15, r1
 54c:	b9 cf       	rjmp	.-142    	; 0x4c0 <main+0x28>
			}
		}
		else if(ans!=inva){
 54e:	8f 3f       	cpi	r24, 0xFF	; 255
 550:	09 f4       	brne	.+2      	; 0x554 <main+0xbc>
 552:	b6 cf       	rjmp	.-148    	; 0x4c0 <main+0x28>
			LCD_WriteChar(ans);
 554:	0e 94 48 01 	call	0x290	; 0x290 <LCD_WriteChar>
			build_num(&num,ans);
 558:	61 2f       	mov	r22, r17
 55a:	ce 01       	movw	r24, r28
 55c:	01 96       	adiw	r24, 0x01	; 1
 55e:	0e 94 b2 02 	call	0x564	; 0x564 <build_num>
 562:	ae cf       	rjmp	.-164    	; 0x4c0 <main+0x28>

00000564 <build_num>:
#include "LCD.h"

extern uint8_t g_tick;

void build_num(int *num, unsigned char ans) {
    ans -= '0';
 564:	60 53       	subi	r22, 0x30	; 48
    if (*num == -1)
 566:	fc 01       	movw	r30, r24
 568:	20 81       	ld	r18, Z
 56a:	31 81       	ldd	r19, Z+1	; 0x01
 56c:	2f 3f       	cpi	r18, 0xFF	; 255
 56e:	ff ef       	ldi	r31, 0xFF	; 255
 570:	3f 07       	cpc	r19, r31
 572:	29 f4       	brne	.+10     	; 0x57e <build_num+0x1a>
        *num = ans;
 574:	70 e0       	ldi	r23, 0x00	; 0
 576:	fc 01       	movw	r30, r24
 578:	71 83       	std	Z+1, r23	; 0x01
 57a:	60 83       	st	Z, r22
 57c:	08 95       	ret
    else
        *num = *num * 10 + ans;
 57e:	a9 01       	movw	r20, r18
 580:	44 0f       	add	r20, r20
 582:	55 1f       	adc	r21, r21
 584:	22 0f       	add	r18, r18
 586:	33 1f       	adc	r19, r19
 588:	22 0f       	add	r18, r18
 58a:	33 1f       	adc	r19, r19
 58c:	22 0f       	add	r18, r18
 58e:	33 1f       	adc	r19, r19
 590:	24 0f       	add	r18, r20
 592:	35 1f       	adc	r19, r21
 594:	26 0f       	add	r18, r22
 596:	31 1d       	adc	r19, r1
 598:	fc 01       	movw	r30, r24
 59a:	31 83       	std	Z+1, r19	; 0x01
 59c:	20 83       	st	Z, r18
 59e:	08 95       	ret

000005a0 <separate_num>:
}

void separate_num(int *arr, int size) {
 5a0:	6f 92       	push	r6
 5a2:	7f 92       	push	r7
 5a4:	8f 92       	push	r8
 5a6:	9f 92       	push	r9
 5a8:	af 92       	push	r10
 5aa:	bf 92       	push	r11
 5ac:	cf 92       	push	r12
 5ae:	df 92       	push	r13
 5b0:	ef 92       	push	r14
 5b2:	ff 92       	push	r15
 5b4:	0f 93       	push	r16
 5b6:	1f 93       	push	r17
 5b8:	cf 93       	push	r28
 5ba:	df 93       	push	r29
 5bc:	6c 01       	movw	r12, r24
 5be:	7b 01       	movw	r14, r22
    for(int i = 0; i < size; i++) {
 5c0:	00 e0       	ldi	r16, 0x00	; 0
 5c2:	10 e0       	ldi	r17, 0x00	; 0
 5c4:	30 c0       	rjmp	.+96     	; 0x626 <separate_num+0x86>
        int count = 1, num = arr[i];
 5c6:	e8 01       	movw	r28, r16
 5c8:	cc 0f       	add	r28, r28
 5ca:	dd 1f       	adc	r29, r29
 5cc:	cc 0d       	add	r28, r12
 5ce:	dd 1d       	adc	r29, r13
 5d0:	88 80       	ld	r8, Y
 5d2:	99 80       	ldd	r9, Y+1	; 0x01
        timer0_init();
 5d4:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <timer0_init>

        while (g_tick != NUMBER_OF_OVERFLOWS) {
 5d8:	1e c0       	rjmp	.+60     	; 0x616 <separate_num+0x76>
            if (!num)
 5da:	81 14       	cp	r8, r1
 5dc:	91 04       	cpc	r9, r1
 5de:	a1 f4       	brne	.+40     	; 0x608 <separate_num+0x68>
 5e0:	21 e0       	ldi	r18, 0x01	; 1
 5e2:	30 e0       	ldi	r19, 0x00	; 0
                goto zero;

            while (num > 0) {
            zero:
                display_on_seven_seg(num % 10, count++);
 5e4:	59 01       	movw	r10, r18
 5e6:	8f ef       	ldi	r24, 0xFF	; 255
 5e8:	a8 1a       	sub	r10, r24
 5ea:	b8 0a       	sbc	r11, r24
 5ec:	c4 01       	movw	r24, r8
 5ee:	6a e0       	ldi	r22, 0x0A	; 10
 5f0:	70 e0       	ldi	r23, 0x00	; 0
 5f2:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__divmodhi4>
 5f6:	66 2e       	mov	r6, r22
 5f8:	77 2e       	mov	r7, r23
 5fa:	b9 01       	movw	r22, r18
 5fc:	0e 94 68 03 	call	0x6d0	; 0x6d0 <display_on_seven_seg>
                num /= 10;
 600:	86 2c       	mov	r8, r6
 602:	97 2c       	mov	r9, r7
            if (!num)
                goto zero;

            while (num > 0) {
            zero:
                display_on_seven_seg(num % 10, count++);
 604:	95 01       	movw	r18, r10
 606:	02 c0       	rjmp	.+4      	; 0x60c <separate_num+0x6c>
 608:	21 e0       	ldi	r18, 0x01	; 1
 60a:	30 e0       	ldi	r19, 0x00	; 0

        while (g_tick != NUMBER_OF_OVERFLOWS) {
            if (!num)
                goto zero;

            while (num > 0) {
 60c:	18 14       	cp	r1, r8
 60e:	19 04       	cpc	r1, r9
 610:	4c f3       	brlt	.-46     	; 0x5e4 <separate_num+0x44>
            zero:
                display_on_seven_seg(num % 10, count++);
                num /= 10;
            }
            num = arr[i];
 612:	88 80       	ld	r8, Y
 614:	99 80       	ldd	r9, Y+1	; 0x01
void separate_num(int *arr, int size) {
    for(int i = 0; i < size; i++) {
        int count = 1, num = arr[i];
        timer0_init();

        while (g_tick != NUMBER_OF_OVERFLOWS) {
 616:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <g_tick>
 61a:	8d 33       	cpi	r24, 0x3D	; 61
 61c:	f1 f6       	brne	.-68     	; 0x5da <separate_num+0x3a>
            }
            num = arr[i];
            count = 1;
        }

        g_tick = 0;
 61e:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <g_tick>
    else
        *num = *num * 10 + ans;
}

void separate_num(int *arr, int size) {
    for(int i = 0; i < size; i++) {
 622:	0f 5f       	subi	r16, 0xFF	; 255
 624:	1f 4f       	sbci	r17, 0xFF	; 255
 626:	0e 15       	cp	r16, r14
 628:	1f 05       	cpc	r17, r15
 62a:	6c f2       	brlt	.-102    	; 0x5c6 <separate_num+0x26>
        g_tick = 0;
    }
	
	//-- latch --
	
	CLR_BIT(LCD_command_PORT,EN);
 62c:	8b b3       	in	r24, 0x1b	; 27
 62e:	8b 7f       	andi	r24, 0xFB	; 251
 630:	8b bb       	out	0x1b, r24	; 27
	SET_BIT(LCD_command_PORT,EN);
 632:	8b b3       	in	r24, 0x1b	; 27
 634:	84 60       	ori	r24, 0x04	; 4
 636:	8b bb       	out	0x1b, r24	; 27
 638:	8f e9       	ldi	r24, 0x9F	; 159
 63a:	9f e0       	ldi	r25, 0x0F	; 15
 63c:	01 97       	sbiw	r24, 0x01	; 1
 63e:	f1 f7       	brne	.-4      	; 0x63c <separate_num+0x9c>
 640:	00 c0       	rjmp	.+0      	; 0x642 <separate_num+0xa2>
 642:	00 00       	nop
	_delay_ms(1);
	CLR_BIT(LCD_command_PORT,EN);
 644:	8b b3       	in	r24, 0x1b	; 27
 646:	8b 7f       	andi	r24, 0xFB	; 251
 648:	8b bb       	out	0x1b, r24	; 27

}
 64a:	df 91       	pop	r29
 64c:	cf 91       	pop	r28
 64e:	1f 91       	pop	r17
 650:	0f 91       	pop	r16
 652:	ff 90       	pop	r15
 654:	ef 90       	pop	r14
 656:	df 90       	pop	r13
 658:	cf 90       	pop	r12
 65a:	bf 90       	pop	r11
 65c:	af 90       	pop	r10
 65e:	9f 90       	pop	r9
 660:	8f 90       	pop	r8
 662:	7f 90       	pop	r7
 664:	6f 90       	pop	r6
 666:	08 95       	ret

00000668 <sort>:

void sort(int *arr, int size) {
 668:	ef 92       	push	r14
 66a:	ff 92       	push	r15
 66c:	0f 93       	push	r16
 66e:	1f 93       	push	r17
 670:	cf 93       	push	r28
 672:	df 93       	push	r29
    for (int i = 0; i < size; i++) {
 674:	c0 e0       	ldi	r28, 0x00	; 0
 676:	d0 e0       	ldi	r29, 0x00	; 0
 678:	21 c0       	rjmp	.+66     	; 0x6bc <sort+0x54>
        for (int j = i+1; j < size; j++) {
 67a:	8e 01       	movw	r16, r28
 67c:	0f 5f       	subi	r16, 0xFF	; 255
 67e:	1f 4f       	sbci	r17, 0xFF	; 255
 680:	98 01       	movw	r18, r16
 682:	18 c0       	rjmp	.+48     	; 0x6b4 <sort+0x4c>
            if (arr[i] > arr[j]) {
 684:	de 01       	movw	r26, r28
 686:	aa 0f       	add	r26, r26
 688:	bb 1f       	adc	r27, r27
 68a:	a8 0f       	add	r26, r24
 68c:	b9 1f       	adc	r27, r25
 68e:	4d 91       	ld	r20, X+
 690:	5c 91       	ld	r21, X
 692:	11 97       	sbiw	r26, 0x01	; 1
 694:	f9 01       	movw	r30, r18
 696:	ee 0f       	add	r30, r30
 698:	ff 1f       	adc	r31, r31
 69a:	e8 0f       	add	r30, r24
 69c:	f9 1f       	adc	r31, r25
 69e:	e0 80       	ld	r14, Z
 6a0:	f1 80       	ldd	r15, Z+1	; 0x01
 6a2:	e4 16       	cp	r14, r20
 6a4:	f5 06       	cpc	r15, r21
 6a6:	24 f4       	brge	.+8      	; 0x6b0 <sort+0x48>
                int temp = arr[i];
                arr[i] = arr[j];
 6a8:	ed 92       	st	X+, r14
 6aa:	fc 92       	st	X, r15
                arr[j] = temp;
 6ac:	51 83       	std	Z+1, r21	; 0x01
 6ae:	40 83       	st	Z, r20

}

void sort(int *arr, int size) {
    for (int i = 0; i < size; i++) {
        for (int j = i+1; j < size; j++) {
 6b0:	2f 5f       	subi	r18, 0xFF	; 255
 6b2:	3f 4f       	sbci	r19, 0xFF	; 255
 6b4:	26 17       	cp	r18, r22
 6b6:	37 07       	cpc	r19, r23
 6b8:	2c f3       	brlt	.-54     	; 0x684 <sort+0x1c>
	CLR_BIT(LCD_command_PORT,EN);

}

void sort(int *arr, int size) {
    for (int i = 0; i < size; i++) {
 6ba:	e8 01       	movw	r28, r16
 6bc:	c6 17       	cp	r28, r22
 6be:	d7 07       	cpc	r29, r23
 6c0:	e4 f2       	brlt	.-72     	; 0x67a <sort+0x12>
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
    }
}
 6c2:	df 91       	pop	r29
 6c4:	cf 91       	pop	r28
 6c6:	1f 91       	pop	r17
 6c8:	0f 91       	pop	r16
 6ca:	ff 90       	pop	r15
 6cc:	ef 90       	pop	r14
 6ce:	08 95       	ret

000006d0 <display_on_seven_seg>:
#include "SevSeg.h"
#include "Math.h"
#include "register.h"
#include "pins.h"

void display_on_seven_seg(int num, int pin) {
 6d0:	cf 93       	push	r28
 6d2:	df 93       	push	r29
 6d4:	cd b7       	in	r28, 0x3d	; 61
 6d6:	de b7       	in	r29, 0x3e	; 62
 6d8:	64 97       	sbiw	r28, 0x14	; 20
 6da:	0f b6       	in	r0, 0x3f	; 63
 6dc:	f8 94       	cli
 6de:	de bf       	out	0x3e, r29	; 62
 6e0:	0f be       	out	0x3f, r0	; 63
 6e2:	cd bf       	out	0x3d, r28	; 61
	SET_BIT(SevSeg_en_DDR1, p2);
 6e4:	2a b3       	in	r18, 0x1a	; 26
 6e6:	24 60       	ori	r18, 0x04	; 4
 6e8:	2a bb       	out	0x1a, r18	; 26
	SET_BIT(SevSeg_en_DDR1, p3);
 6ea:	2a b3       	in	r18, 0x1a	; 26
 6ec:	28 60       	ori	r18, 0x08	; 8
 6ee:	2a bb       	out	0x1a, r18	; 26
	SET_BIT(SevSeg_en_DDR2, p5);
 6f0:	27 b3       	in	r18, 0x17	; 23
 6f2:	20 62       	ori	r18, 0x20	; 32
 6f4:	27 bb       	out	0x17, r18	; 23
	SET_BIT(SevSeg_en_DDR2, p6);
 6f6:	27 b3       	in	r18, 0x17	; 23
 6f8:	20 64       	ori	r18, 0x40	; 64
 6fa:	27 bb       	out	0x17, r18	; 23

	SET_BIT(SevSeg_en_PORT1, p2);
 6fc:	2b b3       	in	r18, 0x1b	; 27
 6fe:	24 60       	ori	r18, 0x04	; 4
 700:	2b bb       	out	0x1b, r18	; 27
	SET_BIT(SevSeg_en_PORT1, p3);
 702:	2b b3       	in	r18, 0x1b	; 27
 704:	28 60       	ori	r18, 0x08	; 8
 706:	2b bb       	out	0x1b, r18	; 27
	SET_BIT(SevSeg_en_PORT2, p5);
 708:	28 b3       	in	r18, 0x18	; 24
 70a:	20 62       	ori	r18, 0x20	; 32
 70c:	28 bb       	out	0x18, r18	; 24
	SET_BIT(SevSeg_en_PORT2, p6);
 70e:	28 b3       	in	r18, 0x18	; 24
 710:	20 64       	ori	r18, 0x40	; 64
 712:	28 bb       	out	0x18, r18	; 24

	data_PORT &= ~0b00010111;
 714:	28 b3       	in	r18, 0x18	; 24
 716:	28 7e       	andi	r18, 0xE8	; 232
 718:	28 bb       	out	0x18, r18	; 24
	const int arr[10] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x10, 0x11};
 71a:	24 e1       	ldi	r18, 0x14	; 20
 71c:	e0 e7       	ldi	r30, 0x70	; 112
 71e:	f0 e0       	ldi	r31, 0x00	; 0
 720:	de 01       	movw	r26, r28
 722:	11 96       	adiw	r26, 0x01	; 1
 724:	01 90       	ld	r0, Z+
 726:	0d 92       	st	X+, r0
 728:	2a 95       	dec	r18
 72a:	e1 f7       	brne	.-8      	; 0x724 <display_on_seven_seg+0x54>
	data_PORT |= arr[num];
 72c:	28 b3       	in	r18, 0x18	; 24
 72e:	88 0f       	add	r24, r24
 730:	99 1f       	adc	r25, r25
 732:	e1 e0       	ldi	r30, 0x01	; 1
 734:	f0 e0       	ldi	r31, 0x00	; 0
 736:	ec 0f       	add	r30, r28
 738:	fd 1f       	adc	r31, r29
 73a:	e8 0f       	add	r30, r24
 73c:	f9 1f       	adc	r31, r25
 73e:	80 81       	ld	r24, Z
 740:	82 2b       	or	r24, r18
 742:	88 bb       	out	0x18, r24	; 24
	2 --> 2
	3 --> 1 (1 first 7-seg from the right)
	5 --> 3
	6 --> 4
	*/
	if (pin < 3) {
 744:	63 30       	cpi	r22, 0x03	; 3
 746:	71 05       	cpc	r23, r1
 748:	dc f4       	brge	.+54     	; 0x780 <display_on_seven_seg+0xb0>
		if (pin == 1)
 74a:	61 30       	cpi	r22, 0x01	; 1
 74c:	71 05       	cpc	r23, r1
 74e:	11 f4       	brne	.+4      	; 0x754 <display_on_seven_seg+0x84>
		   pin += 2;
 750:	6e 5f       	subi	r22, 0xFE	; 254
 752:	7f 4f       	sbci	r23, 0xFF	; 255
		CLR_BIT(SevSeg_en_PORT1, pin);
 754:	2b b3       	in	r18, 0x1b	; 27
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	02 c0       	rjmp	.+4      	; 0x760 <display_on_seven_seg+0x90>
 75c:	88 0f       	add	r24, r24
 75e:	99 1f       	adc	r25, r25
 760:	6a 95       	dec	r22
 762:	e2 f7       	brpl	.-8      	; 0x75c <display_on_seven_seg+0x8c>
 764:	98 2f       	mov	r25, r24
 766:	90 95       	com	r25
 768:	92 23       	and	r25, r18
 76a:	9b bb       	out	0x1b, r25	; 27
 76c:	ef e9       	ldi	r30, 0x9F	; 159
 76e:	ff e0       	ldi	r31, 0x0F	; 15
 770:	31 97       	sbiw	r30, 0x01	; 1
 772:	f1 f7       	brne	.-4      	; 0x770 <display_on_seven_seg+0xa0>
 774:	00 c0       	rjmp	.+0      	; 0x776 <display_on_seven_seg+0xa6>
 776:	00 00       	nop
		_delay_ms(1);
		SET_BIT(SevSeg_en_PORT1, pin);
 778:	9b b3       	in	r25, 0x1b	; 27
 77a:	89 2b       	or	r24, r25
 77c:	8b bb       	out	0x1b, r24	; 27
 77e:	17 c0       	rjmp	.+46     	; 0x7ae <display_on_seven_seg+0xde>
		}
		else {
		pin += 2;
 780:	6e 5f       	subi	r22, 0xFE	; 254
 782:	7f 4f       	sbci	r23, 0xFF	; 255
		CLR_BIT(SevSeg_en_PORT2, pin);
 784:	28 b3       	in	r18, 0x18	; 24
 786:	81 e0       	ldi	r24, 0x01	; 1
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	02 c0       	rjmp	.+4      	; 0x790 <display_on_seven_seg+0xc0>
 78c:	88 0f       	add	r24, r24
 78e:	99 1f       	adc	r25, r25
 790:	6a 95       	dec	r22
 792:	e2 f7       	brpl	.-8      	; 0x78c <display_on_seven_seg+0xbc>
 794:	98 2f       	mov	r25, r24
 796:	90 95       	com	r25
 798:	92 23       	and	r25, r18
 79a:	98 bb       	out	0x18, r25	; 24
 79c:	ef e9       	ldi	r30, 0x9F	; 159
 79e:	ff e0       	ldi	r31, 0x0F	; 15
 7a0:	31 97       	sbiw	r30, 0x01	; 1
 7a2:	f1 f7       	brne	.-4      	; 0x7a0 <display_on_seven_seg+0xd0>
 7a4:	00 c0       	rjmp	.+0      	; 0x7a6 <display_on_seven_seg+0xd6>
 7a6:	00 00       	nop
		_delay_ms(1);
		SET_BIT(SevSeg_en_PORT2, pin);
 7a8:	98 b3       	in	r25, 0x18	; 24
 7aa:	89 2b       	or	r24, r25
 7ac:	88 bb       	out	0x18, r24	; 24
	}
}
 7ae:	64 96       	adiw	r28, 0x14	; 20
 7b0:	0f b6       	in	r0, 0x3f	; 63
 7b2:	f8 94       	cli
 7b4:	de bf       	out	0x3e, r29	; 62
 7b6:	0f be       	out	0x3f, r0	; 63
 7b8:	cd bf       	out	0x3d, r28	; 61
 7ba:	df 91       	pop	r29
 7bc:	cf 91       	pop	r28
 7be:	08 95       	ret

000007c0 <timer0_init>:


extern  uint8_t g_tick=0; // global variable 

void timer0_init(){
	TCNT0=0;
 7c0:	12 be       	out	0x32, r1	; 50
	SET_BIT(TIMSK,TOIE0);
 7c2:	89 b7       	in	r24, 0x39	; 57
 7c4:	81 60       	ori	r24, 0x01	; 1
 7c6:	89 bf       	out	0x39, r24	; 57
	
	TCCR0= (1<<FOC0)|(1<<CS02)|(1<<CS00);
 7c8:	85 e8       	ldi	r24, 0x85	; 133
 7ca:	83 bf       	out	0x33, r24	; 51
	
	SET_BIT(SREG,I_BIT);
 7cc:	8f b7       	in	r24, 0x3f	; 63
 7ce:	80 68       	ori	r24, 0x80	; 128
 7d0:	8f bf       	out	0x3f, r24	; 63
 7d2:	08 95       	ret

000007d4 <__vector_11>:

}

ISR(TIMER0_OVF_vect) { // When Timer0 overflows, the microcontroller automatically jumps to the ISR
 7d4:	1f 92       	push	r1
 7d6:	0f 92       	push	r0
 7d8:	0f b6       	in	r0, 0x3f	; 63
 7da:	0f 92       	push	r0
 7dc:	11 24       	eor	r1, r1
 7de:	8f 93       	push	r24
	g_tick++;
 7e0:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <g_tick>
 7e4:	8f 5f       	subi	r24, 0xFF	; 255
 7e6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <g_tick>
}
 7ea:	8f 91       	pop	r24
 7ec:	0f 90       	pop	r0
 7ee:	0f be       	out	0x3f, r0	; 63
 7f0:	0f 90       	pop	r0
 7f2:	1f 90       	pop	r1
 7f4:	18 95       	reti

000007f6 <__divmodhi4>:
 7f6:	97 fb       	bst	r25, 7
 7f8:	07 2e       	mov	r0, r23
 7fa:	16 f4       	brtc	.+4      	; 0x800 <__DATA_REGION_LENGTH__>
 7fc:	00 94       	com	r0
 7fe:	07 d0       	rcall	.+14     	; 0x80e <__divmodhi4_neg1>
 800:	77 fd       	sbrc	r23, 7
 802:	09 d0       	rcall	.+18     	; 0x816 <__divmodhi4_neg2>
 804:	0e 94 0f 04 	call	0x81e	; 0x81e <__udivmodhi4>
 808:	07 fc       	sbrc	r0, 7
 80a:	05 d0       	rcall	.+10     	; 0x816 <__divmodhi4_neg2>
 80c:	3e f4       	brtc	.+14     	; 0x81c <__divmodhi4_exit>

0000080e <__divmodhi4_neg1>:
 80e:	90 95       	com	r25
 810:	81 95       	neg	r24
 812:	9f 4f       	sbci	r25, 0xFF	; 255
 814:	08 95       	ret

00000816 <__divmodhi4_neg2>:
 816:	70 95       	com	r23
 818:	61 95       	neg	r22
 81a:	7f 4f       	sbci	r23, 0xFF	; 255

0000081c <__divmodhi4_exit>:
 81c:	08 95       	ret

0000081e <__udivmodhi4>:
 81e:	aa 1b       	sub	r26, r26
 820:	bb 1b       	sub	r27, r27
 822:	51 e1       	ldi	r21, 0x11	; 17
 824:	07 c0       	rjmp	.+14     	; 0x834 <__udivmodhi4_ep>

00000826 <__udivmodhi4_loop>:
 826:	aa 1f       	adc	r26, r26
 828:	bb 1f       	adc	r27, r27
 82a:	a6 17       	cp	r26, r22
 82c:	b7 07       	cpc	r27, r23
 82e:	10 f0       	brcs	.+4      	; 0x834 <__udivmodhi4_ep>
 830:	a6 1b       	sub	r26, r22
 832:	b7 0b       	sbc	r27, r23

00000834 <__udivmodhi4_ep>:
 834:	88 1f       	adc	r24, r24
 836:	99 1f       	adc	r25, r25
 838:	5a 95       	dec	r21
 83a:	a9 f7       	brne	.-22     	; 0x826 <__udivmodhi4_loop>
 83c:	80 95       	com	r24
 83e:	90 95       	com	r25
 840:	bc 01       	movw	r22, r24
 842:	cd 01       	movw	r24, r26
 844:	08 95       	ret

00000846 <_exit>:
 846:	f8 94       	cli

00000848 <__stop_program>:
 848:	ff cf       	rjmp	.-2      	; 0x848 <__stop_program>
