
final project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  000004cc  00000540  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000055a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000058c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c88  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007d9  00000000  00000000  000012c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000068b  00000000  00000000  00001aa1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000104  00000000  00000000  0000212c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d4  00000000  00000000  00002230  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006a0  00000000  00000000  00002604  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002ca4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ec       	ldi	r30, 0xCC	; 204
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 c8 01 	call	0x390	; 0x390 <main>
  7a:	0c 94 64 02 	jmp	0x4c8	; 0x4c8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_command>:

void LCD_string(unsigned char* str){
	for(int i=0;str[i]!='\0';i++){
		LCD_WriteChar(str[i]);
	}
}
  82:	9b b3       	in	r25, 0x1b	; 27
  84:	97 7f       	andi	r25, 0xF7	; 247
  86:	9b bb       	out	0x1b, r25	; 27
  88:	98 b3       	in	r25, 0x18	; 24
  8a:	98 7e       	andi	r25, 0xE8	; 232
  8c:	98 bb       	out	0x18, r25	; 24
  8e:	28 2f       	mov	r18, r24
  90:	22 95       	swap	r18
  92:	2f 70       	andi	r18, 0x0F	; 15
  94:	92 2f       	mov	r25, r18
  96:	98 70       	andi	r25, 0x08	; 8
  98:	49 2f       	mov	r20, r25
  9a:	50 e0       	ldi	r21, 0x00	; 0
  9c:	44 0f       	add	r20, r20
  9e:	55 1f       	adc	r21, r21
  a0:	27 70       	andi	r18, 0x07	; 7
  a2:	42 2b       	or	r20, r18
  a4:	98 b3       	in	r25, 0x18	; 24
  a6:	49 2b       	or	r20, r25
  a8:	48 bb       	out	0x18, r20	; 24
  aa:	9b b3       	in	r25, 0x1b	; 27
  ac:	9b 7f       	andi	r25, 0xFB	; 251
  ae:	9b bb       	out	0x1b, r25	; 27
  b0:	9b b3       	in	r25, 0x1b	; 27
  b2:	94 60       	ori	r25, 0x04	; 4
  b4:	9b bb       	out	0x1b, r25	; 27
  b6:	e9 ef       	ldi	r30, 0xF9	; 249
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	31 97       	sbiw	r30, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <LCD_command+0x38>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <LCD_command+0x3e>
  c0:	00 00       	nop
  c2:	9b b3       	in	r25, 0x1b	; 27
  c4:	9b 7f       	andi	r25, 0xFB	; 251
  c6:	9b bb       	out	0x1b, r25	; 27
  c8:	98 b3       	in	r25, 0x18	; 24
  ca:	98 7e       	andi	r25, 0xE8	; 232
  cc:	98 bb       	out	0x18, r25	; 24
  ce:	98 2f       	mov	r25, r24
  d0:	98 70       	andi	r25, 0x08	; 8
  d2:	29 2f       	mov	r18, r25
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	22 0f       	add	r18, r18
  d8:	33 1f       	adc	r19, r19
  da:	87 70       	andi	r24, 0x07	; 7
  dc:	28 2b       	or	r18, r24
  de:	88 b3       	in	r24, 0x18	; 24
  e0:	28 2b       	or	r18, r24
  e2:	28 bb       	out	0x18, r18	; 24
  e4:	8b b3       	in	r24, 0x1b	; 27
  e6:	8b 7f       	andi	r24, 0xFB	; 251
  e8:	8b bb       	out	0x1b, r24	; 27
  ea:	8b b3       	in	r24, 0x1b	; 27
  ec:	84 60       	ori	r24, 0x04	; 4
  ee:	8b bb       	out	0x1b, r24	; 27
  f0:	89 ef       	ldi	r24, 0xF9	; 249
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <LCD_command+0x72>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <LCD_command+0x78>
  fa:	00 00       	nop
  fc:	8b b3       	in	r24, 0x1b	; 27
  fe:	8b 7f       	andi	r24, 0xFB	; 251
 100:	8b bb       	out	0x1b, r24	; 27
 102:	e1 ee       	ldi	r30, 0xE1	; 225
 104:	f4 e0       	ldi	r31, 0x04	; 4
 106:	31 97       	sbiw	r30, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <LCD_command+0x84>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <LCD_command+0x8a>
 10c:	00 00       	nop
 10e:	08 95       	ret

00000110 <LCD_init>:
 110:	8a b3       	in	r24, 0x1a	; 26
 112:	88 60       	ori	r24, 0x08	; 8
 114:	8a bb       	out	0x1a, r24	; 26
 116:	8a b3       	in	r24, 0x1a	; 26
 118:	84 60       	ori	r24, 0x04	; 4
 11a:	8a bb       	out	0x1a, r24	; 26
 11c:	87 b3       	in	r24, 0x17	; 23
 11e:	81 60       	ori	r24, 0x01	; 1
 120:	87 bb       	out	0x17, r24	; 23
 122:	87 b3       	in	r24, 0x17	; 23
 124:	82 60       	ori	r24, 0x02	; 2
 126:	87 bb       	out	0x17, r24	; 23
 128:	87 b3       	in	r24, 0x17	; 23
 12a:	84 60       	ori	r24, 0x04	; 4
 12c:	87 bb       	out	0x17, r24	; 23
 12e:	87 b3       	in	r24, 0x17	; 23
 130:	80 61       	ori	r24, 0x10	; 16
 132:	87 bb       	out	0x17, r24	; 23
 134:	85 ea       	ldi	r24, 0xA5	; 165
 136:	9e e0       	ldi	r25, 0x0E	; 14
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCD_init+0x28>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <LCD_init+0x2e>
 13e:	00 00       	nop
 140:	86 e0       	ldi	r24, 0x06	; 6
 142:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
 146:	82 e0       	ldi	r24, 0x02	; 2
 148:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
 14c:	88 e2       	ldi	r24, 0x28	; 40
 14e:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
 152:	8c e0       	ldi	r24, 0x0C	; 12
 154:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
 15e:	80 e8       	ldi	r24, 0x80	; 128
 160:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
 164:	08 95       	ret

00000166 <LCD_WriteChar>:
 166:	9b b3       	in	r25, 0x1b	; 27
 168:	98 60       	ori	r25, 0x08	; 8
 16a:	9b bb       	out	0x1b, r25	; 27
 16c:	98 b3       	in	r25, 0x18	; 24
 16e:	98 7e       	andi	r25, 0xE8	; 232
 170:	98 bb       	out	0x18, r25	; 24
 172:	28 2f       	mov	r18, r24
 174:	22 95       	swap	r18
 176:	2f 70       	andi	r18, 0x0F	; 15
 178:	92 2f       	mov	r25, r18
 17a:	98 70       	andi	r25, 0x08	; 8
 17c:	49 2f       	mov	r20, r25
 17e:	50 e0       	ldi	r21, 0x00	; 0
 180:	44 0f       	add	r20, r20
 182:	55 1f       	adc	r21, r21
 184:	27 70       	andi	r18, 0x07	; 7
 186:	42 2b       	or	r20, r18
 188:	98 b3       	in	r25, 0x18	; 24
 18a:	49 2b       	or	r20, r25
 18c:	48 bb       	out	0x18, r20	; 24
 18e:	9b b3       	in	r25, 0x1b	; 27
 190:	9b 7f       	andi	r25, 0xFB	; 251
 192:	9b bb       	out	0x1b, r25	; 27
 194:	9b b3       	in	r25, 0x1b	; 27
 196:	94 60       	ori	r25, 0x04	; 4
 198:	9b bb       	out	0x1b, r25	; 27
 19a:	e9 ef       	ldi	r30, 0xF9	; 249
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	31 97       	sbiw	r30, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <LCD_WriteChar+0x38>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <LCD_WriteChar+0x3e>
 1a4:	00 00       	nop
 1a6:	9b b3       	in	r25, 0x1b	; 27
 1a8:	9b 7f       	andi	r25, 0xFB	; 251
 1aa:	9b bb       	out	0x1b, r25	; 27
 1ac:	98 b3       	in	r25, 0x18	; 24
 1ae:	98 7e       	andi	r25, 0xE8	; 232
 1b0:	98 bb       	out	0x18, r25	; 24
 1b2:	98 2f       	mov	r25, r24
 1b4:	98 70       	andi	r25, 0x08	; 8
 1b6:	29 2f       	mov	r18, r25
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	22 0f       	add	r18, r18
 1bc:	33 1f       	adc	r19, r19
 1be:	87 70       	andi	r24, 0x07	; 7
 1c0:	28 2b       	or	r18, r24
 1c2:	88 b3       	in	r24, 0x18	; 24
 1c4:	28 2b       	or	r18, r24
 1c6:	28 bb       	out	0x18, r18	; 24
 1c8:	8b b3       	in	r24, 0x1b	; 27
 1ca:	8b 7f       	andi	r24, 0xFB	; 251
 1cc:	8b bb       	out	0x1b, r24	; 27
 1ce:	8b b3       	in	r24, 0x1b	; 27
 1d0:	84 60       	ori	r24, 0x04	; 4
 1d2:	8b bb       	out	0x1b, r24	; 27
 1d4:	89 ef       	ldi	r24, 0xF9	; 249
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <LCD_WriteChar+0x72>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <LCD_WriteChar+0x78>
 1de:	00 00       	nop
 1e0:	8b b3       	in	r24, 0x1b	; 27
 1e2:	8b 7f       	andi	r24, 0xFB	; 251
 1e4:	8b bb       	out	0x1b, r24	; 27
 1e6:	08 95       	ret

000001e8 <LCD_Number>:

void LCD_Number(int number , int *c) {
 1e8:	0f 93       	push	r16
 1ea:	1f 93       	push	r17
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	ec 01       	movw	r28, r24
 1f2:	8b 01       	movw	r16, r22
		LCD_WriteChar(' ');
 1f4:	80 e2       	ldi	r24, 0x20	; 32
 1f6:	0e 94 b3 00 	call	0x166	; 0x166 <LCD_WriteChar>
		(*c)++;
 1fa:	f8 01       	movw	r30, r16
 1fc:	80 81       	ld	r24, Z
 1fe:	91 81       	ldd	r25, Z+1	; 0x01
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	91 83       	std	Z+1, r25	; 0x01
 204:	80 83       	st	Z, r24
	// Display each digit of the number, ensuring all four digits are shown
	if (number < 1000) {
 206:	c8 3e       	cpi	r28, 0xE8	; 232
 208:	f3 e0       	ldi	r31, 0x03	; 3
 20a:	df 07       	cpc	r29, r31
 20c:	4c f4       	brge	.+18     	; 0x220 <LCD_Number+0x38>
		LCD_WriteChar(' '); // Display a space as a placeholder for thousands digit
 20e:	80 e2       	ldi	r24, 0x20	; 32
 210:	0e 94 b3 00 	call	0x166	; 0x166 <LCD_WriteChar>
		(*c)++;
 214:	f8 01       	movw	r30, r16
 216:	80 81       	ld	r24, Z
 218:	91 81       	ldd	r25, Z+1	; 0x01
 21a:	01 96       	adiw	r24, 0x01	; 1
 21c:	91 83       	std	Z+1, r25	; 0x01
 21e:	80 83       	st	Z, r24
	}
	if (number < 100) {
 220:	c4 36       	cpi	r28, 0x64	; 100
 222:	d1 05       	cpc	r29, r1
 224:	4c f4       	brge	.+18     	; 0x238 <LCD_Number+0x50>
		LCD_WriteChar(' '); // Display a space as a placeholder for hundreds digit
 226:	80 e2       	ldi	r24, 0x20	; 32
 228:	0e 94 b3 00 	call	0x166	; 0x166 <LCD_WriteChar>
		(*c)++;
 22c:	f8 01       	movw	r30, r16
 22e:	80 81       	ld	r24, Z
 230:	91 81       	ldd	r25, Z+1	; 0x01
 232:	01 96       	adiw	r24, 0x01	; 1
 234:	91 83       	std	Z+1, r25	; 0x01
 236:	80 83       	st	Z, r24
	}
	if (number < 10) {
 238:	ca 30       	cpi	r28, 0x0A	; 10
 23a:	d1 05       	cpc	r29, r1
 23c:	4c f4       	brge	.+18     	; 0x250 <LCD_Number+0x68>
		LCD_WriteChar(' '); // Display a space as a placeholder for tens digit
 23e:	80 e2       	ldi	r24, 0x20	; 32
 240:	0e 94 b3 00 	call	0x166	; 0x166 <LCD_WriteChar>
		(*c)++;
 244:	f8 01       	movw	r30, r16
 246:	80 81       	ld	r24, Z
 248:	91 81       	ldd	r25, Z+1	; 0x01
 24a:	01 96       	adiw	r24, 0x01	; 1
 24c:	91 83       	std	Z+1, r25	; 0x01
 24e:	80 83       	st	Z, r24
	}
	if (number >= 1000) {
 250:	c8 3e       	cpi	r28, 0xE8	; 232
 252:	f3 e0       	ldi	r31, 0x03	; 3
 254:	df 07       	cpc	r29, r31
 256:	9c f0       	brlt	.+38     	; 0x27e <LCD_Number+0x96>
		LCD_WriteChar(number / 1000 % 10 + '0'); // Display thousands digit
 258:	ce 01       	movw	r24, r28
 25a:	68 ee       	ldi	r22, 0xE8	; 232
 25c:	73 e0       	ldi	r23, 0x03	; 3
 25e:	0e 94 3c 02 	call	0x478	; 0x478 <__divmodhi4>
 262:	cb 01       	movw	r24, r22
 264:	6a e0       	ldi	r22, 0x0A	; 10
 266:	70 e0       	ldi	r23, 0x00	; 0
 268:	0e 94 3c 02 	call	0x478	; 0x478 <__divmodhi4>
 26c:	80 5d       	subi	r24, 0xD0	; 208
 26e:	0e 94 b3 00 	call	0x166	; 0x166 <LCD_WriteChar>
		(*c)++;
 272:	f8 01       	movw	r30, r16
 274:	80 81       	ld	r24, Z
 276:	91 81       	ldd	r25, Z+1	; 0x01
 278:	01 96       	adiw	r24, 0x01	; 1
 27a:	91 83       	std	Z+1, r25	; 0x01
 27c:	80 83       	st	Z, r24
	}
	if (number >= 100) {
 27e:	c4 36       	cpi	r28, 0x64	; 100
 280:	d1 05       	cpc	r29, r1
 282:	9c f0       	brlt	.+38     	; 0x2aa <LCD_Number+0xc2>
		LCD_WriteChar(number / 100 % 10 + '0'); // Display hundreds digit
 284:	ce 01       	movw	r24, r28
 286:	64 e6       	ldi	r22, 0x64	; 100
 288:	70 e0       	ldi	r23, 0x00	; 0
 28a:	0e 94 3c 02 	call	0x478	; 0x478 <__divmodhi4>
 28e:	cb 01       	movw	r24, r22
 290:	6a e0       	ldi	r22, 0x0A	; 10
 292:	70 e0       	ldi	r23, 0x00	; 0
 294:	0e 94 3c 02 	call	0x478	; 0x478 <__divmodhi4>
 298:	80 5d       	subi	r24, 0xD0	; 208
 29a:	0e 94 b3 00 	call	0x166	; 0x166 <LCD_WriteChar>
		(*c)++;
 29e:	f8 01       	movw	r30, r16
 2a0:	80 81       	ld	r24, Z
 2a2:	91 81       	ldd	r25, Z+1	; 0x01
 2a4:	01 96       	adiw	r24, 0x01	; 1
 2a6:	91 83       	std	Z+1, r25	; 0x01
 2a8:	80 83       	st	Z, r24
	}
	if (number >= 10) {
 2aa:	ca 30       	cpi	r28, 0x0A	; 10
 2ac:	d1 05       	cpc	r29, r1
 2ae:	9c f0       	brlt	.+38     	; 0x2d6 <LCD_Number+0xee>
		LCD_WriteChar(number / 10 % 10 + '0'); // Display tens digit
 2b0:	2a e0       	ldi	r18, 0x0A	; 10
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	ce 01       	movw	r24, r28
 2b6:	b9 01       	movw	r22, r18
 2b8:	0e 94 3c 02 	call	0x478	; 0x478 <__divmodhi4>
 2bc:	cb 01       	movw	r24, r22
 2be:	b9 01       	movw	r22, r18
 2c0:	0e 94 3c 02 	call	0x478	; 0x478 <__divmodhi4>
 2c4:	80 5d       	subi	r24, 0xD0	; 208
 2c6:	0e 94 b3 00 	call	0x166	; 0x166 <LCD_WriteChar>
		(*c)++;
 2ca:	f8 01       	movw	r30, r16
 2cc:	80 81       	ld	r24, Z
 2ce:	91 81       	ldd	r25, Z+1	; 0x01
 2d0:	01 96       	adiw	r24, 0x01	; 1
 2d2:	91 83       	std	Z+1, r25	; 0x01
 2d4:	80 83       	st	Z, r24
	}
	LCD_WriteChar(number % 10 + '0'); // Display units digit
 2d6:	ce 01       	movw	r24, r28
 2d8:	6a e0       	ldi	r22, 0x0A	; 10
 2da:	70 e0       	ldi	r23, 0x00	; 0
 2dc:	0e 94 3c 02 	call	0x478	; 0x478 <__divmodhi4>
 2e0:	80 5d       	subi	r24, 0xD0	; 208
 2e2:	0e 94 b3 00 	call	0x166	; 0x166 <LCD_WriteChar>
	(*c)++;
 2e6:	f8 01       	movw	r30, r16
 2e8:	80 81       	ld	r24, Z
 2ea:	91 81       	ldd	r25, Z+1	; 0x01
 2ec:	01 96       	adiw	r24, 0x01	; 1
 2ee:	91 83       	std	Z+1, r25	; 0x01
 2f0:	80 83       	st	Z, r24
	
}
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	1f 91       	pop	r17
 2f8:	0f 91       	pop	r16
 2fa:	08 95       	ret

000002fc <LCD_clear>:

void LCD_clear(void){
	LCD_command(0x01);
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
 302:	08 95       	ret

00000304 <len_num>:
#define F_CPU 8000000UL
#include <util/delay.h>


int len_num(int x){
	int c=0;
 304:	20 e0       	ldi	r18, 0x00	; 0
 306:	30 e0       	ldi	r19, 0x00	; 0
	while(x>0){
 308:	07 c0       	rjmp	.+14     	; 0x318 <len_num+0x14>
		x=x/10;
 30a:	6a e0       	ldi	r22, 0x0A	; 10
 30c:	70 e0       	ldi	r23, 0x00	; 0
 30e:	0e 94 3c 02 	call	0x478	; 0x478 <__divmodhi4>
 312:	cb 01       	movw	r24, r22
		c++;
 314:	2f 5f       	subi	r18, 0xFF	; 255
 316:	3f 4f       	sbci	r19, 0xFF	; 255
#include <util/delay.h>


int len_num(int x){
	int c=0;
	while(x>0){
 318:	18 16       	cp	r1, r24
 31a:	19 06       	cpc	r1, r25
 31c:	b4 f3       	brlt	.-20     	; 0x30a <len_num+0x6>
		x=x/10;
		c++;
	}
    return c;
}
 31e:	c9 01       	movw	r24, r18
 320:	08 95       	ret

00000322 <sortNumbers>:


void sortNumbers(int arr[], int n) {
 322:	0f 93       	push	r16
 324:	1f 93       	push	r17
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
	int i, j;
	for (i = 0; i < n-1; i++) {
 32a:	c0 e0       	ldi	r28, 0x00	; 0
 32c:	d0 e0       	ldi	r29, 0x00	; 0
 32e:	25 c0       	rjmp	.+74     	; 0x37a <sortNumbers+0x58>
		for (j = 0; j < n-i-1; j++) {
			if (arr[j] > arr[j+1]) {
 330:	d9 01       	movw	r26, r18
 332:	aa 0f       	add	r26, r26
 334:	bb 1f       	adc	r27, r27
 336:	a8 0f       	add	r26, r24
 338:	b9 1f       	adc	r27, r25
 33a:	4d 91       	ld	r20, X+
 33c:	5c 91       	ld	r21, X
 33e:	11 97       	sbiw	r26, 0x01	; 1
 340:	f9 01       	movw	r30, r18
 342:	31 96       	adiw	r30, 0x01	; 1
 344:	ee 0f       	add	r30, r30
 346:	ff 1f       	adc	r31, r31
 348:	e8 0f       	add	r30, r24
 34a:	f9 1f       	adc	r31, r25
 34c:	00 81       	ld	r16, Z
 34e:	11 81       	ldd	r17, Z+1	; 0x01
 350:	04 17       	cp	r16, r20
 352:	15 07       	cpc	r17, r21
 354:	24 f4       	brge	.+8      	; 0x35e <sortNumbers+0x3c>
				int temp = arr[j];
				arr[j] = arr[j+1];
 356:	0d 93       	st	X+, r16
 358:	1c 93       	st	X, r17
				arr[j+1] = temp;
 35a:	51 83       	std	Z+1, r21	; 0x01
 35c:	40 83       	st	Z, r20


void sortNumbers(int arr[], int n) {
	int i, j;
	for (i = 0; i < n-1; i++) {
		for (j = 0; j < n-i-1; j++) {
 35e:	2f 5f       	subi	r18, 0xFF	; 255
 360:	3f 4f       	sbci	r19, 0xFF	; 255
 362:	02 c0       	rjmp	.+4      	; 0x368 <sortNumbers+0x46>
 364:	20 e0       	ldi	r18, 0x00	; 0
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	ab 01       	movw	r20, r22
 36a:	4c 1b       	sub	r20, r28
 36c:	5d 0b       	sbc	r21, r29
 36e:	41 50       	subi	r20, 0x01	; 1
 370:	51 09       	sbc	r21, r1
 372:	24 17       	cp	r18, r20
 374:	35 07       	cpc	r19, r21
 376:	e4 f2       	brlt	.-72     	; 0x330 <sortNumbers+0xe>
}


void sortNumbers(int arr[], int n) {
	int i, j;
	for (i = 0; i < n-1; i++) {
 378:	21 96       	adiw	r28, 0x01	; 1
 37a:	9b 01       	movw	r18, r22
 37c:	21 50       	subi	r18, 0x01	; 1
 37e:	31 09       	sbc	r19, r1
 380:	c2 17       	cp	r28, r18
 382:	d3 07       	cpc	r29, r19
 384:	7c f3       	brlt	.-34     	; 0x364 <sortNumbers+0x42>
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
	}
}
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	1f 91       	pop	r17
 38c:	0f 91       	pop	r16
 38e:	08 95       	ret

00000390 <main>:


int main(void)
{
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 394:	cd b7       	in	r28, 0x3d	; 61
 396:	de b7       	in	r29, 0x3e	; 62
 398:	6c 97       	sbiw	r28, 0x1c	; 28
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	f8 94       	cli
 39e:	de bf       	out	0x3e, r29	; 62
 3a0:	0f be       	out	0x3f, r0	; 63
 3a2:	cd bf       	out	0x3d, r28	; 61
	int cursor_position = 0;
 3a4:	1a 82       	std	Y+2, r1	; 0x02
 3a6:	19 82       	std	Y+1, r1	; 0x01

	LCD_init();
 3a8:	0e 94 88 00 	call	0x110	; 0x110 <LCD_init>

	int arr[] = {1000,2000,1189,1804,1183,8881,8401,1881,9829,5888,1880,2588,9999};
 3ac:	8a e1       	ldi	r24, 0x1A	; 26
 3ae:	e0 e6       	ldi	r30, 0x60	; 96
 3b0:	f0 e0       	ldi	r31, 0x00	; 0
 3b2:	de 01       	movw	r26, r28
 3b4:	13 96       	adiw	r26, 0x03	; 3
 3b6:	01 90       	ld	r0, Z+
 3b8:	0d 92       	st	X+, r0
 3ba:	8a 95       	dec	r24
 3bc:	e1 f7       	brne	.-8      	; 0x3b6 <main+0x26>
		
	int n = sizeof(arr)/sizeof(arr[0]);
	
	sortNumbers(arr, n);	
 3be:	6d e0       	ldi	r22, 0x0D	; 13
 3c0:	70 e0       	ldi	r23, 0x00	; 0
 3c2:	ce 01       	movw	r24, r28
 3c4:	03 96       	adiw	r24, 0x03	; 3
 3c6:	0e 94 91 01 	call	0x322	; 0x322 <sortNumbers>
	
	for (int i = 0 ; i < n ;i++)
 3ca:	00 e0       	ldi	r16, 0x00	; 0
 3cc:	10 e0       	ldi	r17, 0x00	; 0
 3ce:	4f c0       	rjmp	.+158    	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
	{
		int l=len_num(arr[i]);
 3d0:	f8 01       	movw	r30, r16
 3d2:	ee 0f       	add	r30, r30
 3d4:	ff 1f       	adc	r31, r31
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	8c 0f       	add	r24, r28
 3dc:	9d 1f       	adc	r25, r29
 3de:	e8 0f       	add	r30, r24
 3e0:	f9 1f       	adc	r31, r25
 3e2:	82 81       	ldd	r24, Z+2	; 0x02
 3e4:	93 81       	ldd	r25, Z+3	; 0x03
 3e6:	0e 94 82 01 	call	0x304	; 0x304 <len_num>
 3ea:	7c 01       	movw	r14, r24
			
		if(cursor_position <= 18 && l > 18-cursor_position){
 3ec:	29 81       	ldd	r18, Y+1	; 0x01
 3ee:	3a 81       	ldd	r19, Y+2	; 0x02
 3f0:	23 31       	cpi	r18, 0x13	; 19
 3f2:	31 05       	cpc	r19, r1
 3f4:	54 f4       	brge	.+20     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 3f6:	82 e1       	ldi	r24, 0x12	; 18
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	82 1b       	sub	r24, r18
 3fc:	93 0b       	sbc	r25, r19
 3fe:	8e 15       	cp	r24, r14
 400:	9f 05       	cpc	r25, r15
 402:	1c f4       	brge	.+6      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
		LCD_WriteChar(' ');
 404:	80 e2       	ldi	r24, 0x20	; 32
 406:	0e 94 b3 00 	call	0x166	; 0x166 <LCD_WriteChar>
		}
		if(l > 30-cursor_position ){
 40a:	29 81       	ldd	r18, Y+1	; 0x01
 40c:	3a 81       	ldd	r19, Y+2	; 0x02
 40e:	8e e1       	ldi	r24, 0x1E	; 30
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	82 1b       	sub	r24, r18
 414:	93 0b       	sbc	r25, r19
 416:	8e 15       	cp	r24, r14
 418:	9f 05       	cpc	r25, r15
 41a:	6c f4       	brge	.+26     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
			LCD_clear();
 41c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LCD_clear>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 420:	8f e9       	ldi	r24, 0x9F	; 159
 422:	9f e0       	ldi	r25, 0x0F	; 15
 424:	01 97       	sbiw	r24, 0x01	; 1
 426:	f1 f7       	brne	.-4      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 428:	00 c0       	rjmp	.+0      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 42a:	00 00       	nop
			_delay_ms(2);
			cursor_position = 0; 
 42c:	1a 82       	std	Y+2, r1	; 0x02
 42e:	19 82       	std	Y+1, r1	; 0x01
			LCD_command(0x80);
 430:	80 e8       	ldi	r24, 0x80	; 128
 432:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
			}
			
			LCD_Number(arr[i], &cursor_position);
 436:	f8 01       	movw	r30, r16
 438:	ee 0f       	add	r30, r30
 43a:	ff 1f       	adc	r31, r31
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	8c 0f       	add	r24, r28
 442:	9d 1f       	adc	r25, r29
 444:	e8 0f       	add	r30, r24
 446:	f9 1f       	adc	r31, r25
 448:	bc 01       	movw	r22, r24
 44a:	82 81       	ldd	r24, Z+2	; 0x02
 44c:	93 81       	ldd	r25, Z+3	; 0x03
 44e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_Number>
			LCD_WriteChar(' ');
 452:	80 e2       	ldi	r24, 0x20	; 32
 454:	0e 94 b3 00 	call	0x166	; 0x166 <LCD_WriteChar>
 458:	9f ef       	ldi	r25, 0xFF	; 255
 45a:	23 ed       	ldi	r18, 0xD3	; 211
 45c:	80 e3       	ldi	r24, 0x30	; 48
 45e:	91 50       	subi	r25, 0x01	; 1
 460:	20 40       	sbci	r18, 0x00	; 0
 462:	80 40       	sbci	r24, 0x00	; 0
 464:	e1 f7       	brne	.-8      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 466:	00 c0       	rjmp	.+0      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 468:	00 00       	nop
		
	int n = sizeof(arr)/sizeof(arr[0]);
	
	sortNumbers(arr, n);	
	
	for (int i = 0 ; i < n ;i++)
 46a:	0f 5f       	subi	r16, 0xFF	; 255
 46c:	1f 4f       	sbci	r17, 0xFF	; 255
 46e:	0d 30       	cpi	r16, 0x0D	; 13
 470:	11 05       	cpc	r17, r1
 472:	0c f4       	brge	.+2      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 474:	ad cf       	rjmp	.-166    	; 0x3d0 <main+0x40>
 476:	ff cf       	rjmp	.-2      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>

00000478 <__divmodhi4>:
 478:	97 fb       	bst	r25, 7
 47a:	07 2e       	mov	r0, r23
 47c:	16 f4       	brtc	.+4      	; 0x482 <__divmodhi4+0xa>
 47e:	00 94       	com	r0
 480:	07 d0       	rcall	.+14     	; 0x490 <__divmodhi4_neg1>
 482:	77 fd       	sbrc	r23, 7
 484:	09 d0       	rcall	.+18     	; 0x498 <__divmodhi4_neg2>
 486:	0e 94 50 02 	call	0x4a0	; 0x4a0 <__udivmodhi4>
 48a:	07 fc       	sbrc	r0, 7
 48c:	05 d0       	rcall	.+10     	; 0x498 <__divmodhi4_neg2>
 48e:	3e f4       	brtc	.+14     	; 0x49e <__divmodhi4_exit>

00000490 <__divmodhi4_neg1>:
 490:	90 95       	com	r25
 492:	81 95       	neg	r24
 494:	9f 4f       	sbci	r25, 0xFF	; 255
 496:	08 95       	ret

00000498 <__divmodhi4_neg2>:
 498:	70 95       	com	r23
 49a:	61 95       	neg	r22
 49c:	7f 4f       	sbci	r23, 0xFF	; 255

0000049e <__divmodhi4_exit>:
 49e:	08 95       	ret

000004a0 <__udivmodhi4>:
 4a0:	aa 1b       	sub	r26, r26
 4a2:	bb 1b       	sub	r27, r27
 4a4:	51 e1       	ldi	r21, 0x11	; 17
 4a6:	07 c0       	rjmp	.+14     	; 0x4b6 <__udivmodhi4_ep>

000004a8 <__udivmodhi4_loop>:
 4a8:	aa 1f       	adc	r26, r26
 4aa:	bb 1f       	adc	r27, r27
 4ac:	a6 17       	cp	r26, r22
 4ae:	b7 07       	cpc	r27, r23
 4b0:	10 f0       	brcs	.+4      	; 0x4b6 <__udivmodhi4_ep>
 4b2:	a6 1b       	sub	r26, r22
 4b4:	b7 0b       	sbc	r27, r23

000004b6 <__udivmodhi4_ep>:
 4b6:	88 1f       	adc	r24, r24
 4b8:	99 1f       	adc	r25, r25
 4ba:	5a 95       	dec	r21
 4bc:	a9 f7       	brne	.-22     	; 0x4a8 <__udivmodhi4_loop>
 4be:	80 95       	com	r24
 4c0:	90 95       	com	r25
 4c2:	bc 01       	movw	r22, r24
 4c4:	cd 01       	movw	r24, r26
 4c6:	08 95       	ret

000004c8 <_exit>:
 4c8:	f8 94       	cli

000004ca <__stop_program>:
 4ca:	ff cf       	rjmp	.-2      	; 0x4ca <__stop_program>
